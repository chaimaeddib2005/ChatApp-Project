{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onBeforeUnmount } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { db } from '../firebase';\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const user1 = route.params.user1;\n    const user2 = route.params.user2;\n    const newMessage = ref('');\n    const messageList = ref([]);\n    const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`;\n    const chatRef = doc(db, 'chats', chatId);\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      for (const id of ids) {\n        const messageDoc = await getDoc(doc(db, 'messages', id));\n        if (messageDoc.exists()) {\n          messages.push({\n            id: messageDoc.id,\n            ...messageDoc.data()\n          });\n        }\n      }\n      messageList.value = messages;\n    }\n    const chatUnsub = onSnapshot(chatRef, chatSnap => {\n      if (chatSnap.exists()) {\n        const chatData = chatSnap.data();\n        const messageIds = chatData.messages || [];\n        loadMessagesByIds(messageIds);\n      } else {\n        messageList.value = [];\n      }\n    });\n    async function sendMessage() {\n      if (!newMessage.value.trim()) return;\n      const messageData = {\n        sender: currentUser.uid,\n        receiver: currentUser.uid === user1 ? user2 : user1,\n        message: newMessage.value,\n        timestamp: serverTimestamp()\n      };\n      const newMsgRef = await addDoc(collection(db, 'messages'), messageData);\n      await updateDoc(chatRef, {\n        messages: arrayUnion(newMsgRef.id)\n      });\n      newMessage.value = '';\n    }\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      const date = ts.toDate();\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n    });\n    const __returned__ = {\n      route,\n      user1,\n      user2,\n      newMessage,\n      messageList,\n      chatId,\n      chatRef,\n      auth,\n      currentUser,\n      loadMessagesByIds,\n      chatUnsub,\n      sendMessage,\n      formatTimestamp,\n      ref,\n      onBeforeUnmount,\n      get useRoute() {\n        return useRoute;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get getAuth() {\n        return getAuth;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onBeforeUnmount","useRoute","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","getAuth","db","route","user1","params","user2","newMessage","messageList","chatId","chatRef","auth","currentUser","loadMessagesByIds","ids","messages","id","messageDoc","exists","push","data","value","chatUnsub","chatSnap","chatData","messageIds","sendMessage","trim","messageData","sender","uid","receiver","message","timestamp","newMsgRef","formatTimestamp","ts","date","toDate","toLocaleTimeString","hour","minute"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.message\" :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\">\r\n          {{ msg.message }}\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n      </ul>\r\n      <input type=\"text\" v-model=\"newMessage\">\r\n      <button @click.prevent=\"sendMessage\">\r\n            <i class=\"fas fa-paper-plane\"></i>\r\n    </button>\r\n\r\n    </div>\r\n  </template>\r\n  <script setup>\r\n  import { ref, onBeforeUnmount } from 'vue';\r\n  import { useRoute } from 'vue-router';\r\n  import {\r\n    doc, getDoc, onSnapshot,\r\n    addDoc, updateDoc, arrayUnion,\r\n    collection, serverTimestamp\r\n  } from 'firebase/firestore';\r\n  import { getAuth } from 'firebase/auth';\r\n  import { db } from '../firebase';\r\n  \r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  \r\n  const newMessage = ref('');\r\n  const messageList = ref([]);\r\n  \r\n  const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`;\r\n  const chatRef = doc(db, 'chats', chatId);\r\n  \r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'messages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  const chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      messageList.value = [];\r\n    }\r\n  });\r\n  \r\n  async function sendMessage() {\r\n    if (!newMessage.value.trim()) return;\r\n  \r\n    const messageData = {\r\n      sender: currentUser.uid,\r\n      receiver: currentUser.uid === user1 ? user2 : user1,\r\n      message: newMessage.value,\r\n      timestamp: serverTimestamp()\r\n    };\r\n  \r\n    const newMsgRef = await addDoc(collection(db, 'messages'), messageData);\r\n    await updateDoc(chatRef, {\r\n      messages: arrayUnion(newMsgRef.id)\r\n    });\r\n  \r\n    newMessage.value = '';\r\n  }\r\n  \r\n  function formatTimestamp(ts) {\r\n    if (!ts) return '';\r\n    const date = ts.toDate();\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n  \r\n\r\n  \r\n  <style scoped>\r\n  ul{\r\n    max-width: 40%;\r\n  }\r\n  li{\r\n    list-style: none;\r\n    width: 100px;\r\n  }\r\n  .sent {\r\n    text-align: right;\r\n    background-color: #daf8cb;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .received {\r\n    text-align: left;\r\n    background-color: #f1f0f0;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-right: auto;\r\n  }\r\n  button{\r\n    border: none;\r\n    background-color: rgb(72, 111, 72);\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  .timestamp {\r\n  font-size: 0.75rem;\r\n  color: #888;\r\n  display: block;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n</style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}