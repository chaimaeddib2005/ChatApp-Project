{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"timestamp\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Chat between \" + _toDisplayString($setup.user1) + \" and \" + _toDisplayString($setup.user2), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messageList, msg => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: msg.message,\n      class: _normalizeClass(msg.sender === $setup.currentUser?.uid ? 'sent' : 'received')\n    }, [_createTextVNode(_toDisplayString(msg.message) + \" \", 1 /* TEXT */), _createElementVNode(\"small\", _hoisted_1, _toDisplayString($setup.formatTimestamp(msg.timestamp)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newMessage = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _withModifiers($setup.sendMessage, [\"prevent\"])\n  }, _cache[1] || (_cache[1] = [_createElementVNode(\"i\", {\n    class: \"fas fa-paper-plane\"\n  }, null, -1 /* HOISTED */)]))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$setup","user1","user2","_Fragment","_renderList","messageList","msg","key","message","_normalizeClass","sender","currentUser","uid","_createTextVNode","_hoisted_1","formatTimestamp","timestamp","type","_cache","$event","newMessage","onClick","_withModifiers","sendMessage"],"sources":["C:\\Users\\khadi\\ChatApp-Project\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.message\" :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\">\r\n          {{ msg.message }}\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n      </ul>\r\n      <input type=\"text\" v-model=\"newMessage\">\r\n      <button @click.prevent=\"sendMessage\">\r\n            <i class=\"fas fa-paper-plane\"></i>\r\n    </button>\r\n\r\n    </div>\r\n  </template>\r\n  <script setup>\r\n  import { ref, onBeforeUnmount, onMounted } from 'vue';\r\n  import { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, getDocs } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  import { useRoute } from 'vue-router';\r\n  import { getAuth } from 'firebase/auth';\r\n  \r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  \r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n  \r\n  const newMessage = ref(\"\");\r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  let chatId = null;\r\n  \r\n  // 🔍 Helper to find the existing chat between user1 and user2\r\n  async function findChatId(user1, user2) {\r\n    const chatsRef = collection(db, 'chats');\r\n    const snapshot = await getDocs(chatsRef);\r\n  \r\n    for (const docSnap of snapshot.docs) {\r\n      const data = docSnap.data();\r\n      const users = [data.user1, data.user2];\r\n      if (users.includes(user1) && users.includes(user2)) {\r\n        return docSnap.id;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  // 👇 Load chat on component mount\r\n  onMounted(async () => {\r\n    chatId = await findChatId(user1, user2);\r\n  \r\n    if (!chatId) {\r\n      const newChatRef = await addDoc(collection(db, 'chats'), {\r\n        user1,\r\n        user2,\r\n        messages: []\r\n      });\r\n      chatId = newChatRef.id;\r\n    }\r\n  \r\n    const chatRef = doc(db, 'chats', chatId);\r\n    chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n      if (chatSnap.exists()) {\r\n        const chatData = chatSnap.data();\r\n        const messageIds = chatData.messages || [];\r\n        loadMessagesByIds(messageIds);\r\n      } else {\r\n        console.log('Chat does not exist.');\r\n        messageList.value = [];\r\n      }\r\n    });\r\n  });\r\n  \r\n  async function sendMessage() {\r\n    if (!newMessage.value.trim()) return;\r\n  \r\n    try {\r\n      const messageData = {\r\n        sender: currentUser?.uid,  \r\n        receiver: currentUser?.uid === user1 ? user2 : user1,  \r\n        message: newMessage.value,\r\n        timestamp: serverTimestamp()\r\n      };\r\n  \r\n      const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n  \r\n      await updateDoc(doc(db, 'chats', chatId), {\r\n        messages: arrayUnion(newMsgRef.id)\r\n      });\r\n  \r\n      newMessage.value = \"\";\r\n  \r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    }\r\n  }\r\n  \r\n  function formatTimestamp(ts) {\r\n    if (!ts) return '';\r\n    const date = ts.toDate();\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Main container */\r\n  .chat-container {\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n    padding: 16px;\r\n    height: 80vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #f9f9f9;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  /* Header */\r\n  .chat-header {\r\n    text-align: center;\r\n    color: #333;\r\n    margin-bottom: 16px;\r\n    padding-bottom: 8px;\r\n    border-bottom: 1px solid #e0e0e0;\r\n    font-size: 1.2rem;\r\n  }\r\n  \r\n  /* Messages list */\r\n  .messages-list {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding: 0;\r\n    margin: 0 0 12px 0;\r\n  }\r\n  \r\n  /* Individual messages */\r\n  .message {\r\n    list-style: none;\r\n    margin-bottom: 8px;\r\n    max-width: 75%;\r\n    padding: 8px 12px;\r\n    border-radius: 12px;\r\n    line-height: 1.3;\r\n    font-size: 0.9rem;\r\n  }\r\n  \r\n  /* Sent messages */\r\n  .sent {\r\n    background-color: #4285f4;\r\n    color: white;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  /* Received messages */\r\n  .received {\r\n    background-color: #e0e0e0;\r\n    color: #333;\r\n    margin-right: auto;\r\n  }\r\n  \r\n  /* Input area */\r\n  .input-area {\r\n    display: flex;\r\n    gap: 8px;\r\n    align-items: center;\r\n  }\r\n  \r\n  /* Message input */\r\n  .message-input {\r\n    flex: 1;\r\n    padding: 8px 12px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 20px;\r\n    outline: none;\r\n    font-size: 0.9rem;\r\n    height: 36px;\r\n  }\r\n  \r\n  .message-input:focus {\r\n    border-color: #4285f4;\r\n  }\r\n  \r\n  /* Send button */\r\n  .send-button {\r\n    background-color: #4285f4;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 50%;\r\n    width: 40px;\r\n    height: 40px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .send-button:hover {\r\n    background-color: #3367d6;\r\n  }\r\n  \r\n  /* Timestamp */\r\n  .timestamp {\r\n    font-size: 0.65rem;\r\n    opacity: 0.7;\r\n    margin-top: 2px;\r\n    display: block;\r\n  }\r\n  \r\n  .sent .timestamp {\r\n    color: rgba(255,255,255,0.8);\r\n    text-align: right;\r\n  }\r\n  \r\n  .received .timestamp {\r\n    color: rgba(0,0,0,0.6);\r\n    text-align: left;\r\n  }\r\n  </style>"],"mappings":";;EAMiBA,KAAK,EAAC;AAAW;;uBAL9BC,mBAAA,CAaM,cAZJC,mBAAA,CAAiD,YAA7C,eAAa,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,IAAG,OAAK,GAAAF,gBAAA,CAAGC,MAAA,CAAAE,KAAK,kBACzCJ,mBAAA,CAKK,c,kBAJHD,mBAAA,CAGKM,SAAA,QAPbC,WAAA,CAI0BJ,MAAA,CAAAK,WAAW,EAAlBC,GAAG;yBAAdT,mBAAA,CAGK;MAH2BU,GAAG,EAAED,GAAG,CAACE,OAAO;MAAGZ,KAAK,EAJhEa,eAAA,CAIkEH,GAAG,CAACI,MAAM,KAAKV,MAAA,CAAAW,WAAW,EAAEC,GAAG;QAJjGC,gBAAA,CAAAd,gBAAA,CAKaO,GAAG,CAACE,OAAO,IAAG,GACjB,iBAAAV,mBAAA,CAAqE,SAArEgB,UAAqE,EAAAf,gBAAA,CAAzCC,MAAA,CAAAe,eAAe,CAACT,GAAG,CAACU,SAAS,kB;oDAG7DlB,mBAAA,CAAwC;IAAjCmB,IAAI,EAAC,MAAM;IATxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IASkCnB,MAAA,CAAAoB,UAAU,GAAAD,MAAA;iDAAVnB,MAAA,CAAAoB,UAAU,E,GACtCtB,mBAAA,CAEO;IAFEuB,OAAK,EAVpBC,cAAA,CAU8BtB,MAAA,CAAAuB,WAAW;gCAC7BzB,mBAAA,CAAkC;IAA/BF,KAAK,EAAC;EAAoB,2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}