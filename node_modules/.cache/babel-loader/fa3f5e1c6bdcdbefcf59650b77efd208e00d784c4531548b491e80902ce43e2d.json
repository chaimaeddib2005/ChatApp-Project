{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, onMounted, onBeforeUnmount, nextTick } from 'vue';\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue } from 'firebase/database';\nimport { useRoute } from 'vue-router';\nimport { getAuth } from 'firebase/auth';\nimport { useRouter } from 'vue-router';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, deleteDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const route = useRoute();\n    const chatId = route.params.chatId;\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n\n    // Refs\n    const newMessage = ref('');\n    const messageList = ref([]);\n    const previewUrl = ref('');\n    const fileInput = ref(null);\n    const otherUserStatus = ref('offline');\n    const otherUsername = ref('');\n    const otherUserPfp = ref(''); // Add this with your other refs\n    const isOtherUserTyping = ref(false);\n    const messagesContainer = ref(null);\n    const hoveredMessage = ref(null);\n    const showDeleteModal = ref(false);\n    const messageToDelete = ref(null);\n    let typingTimeout = null;\n    let otherUserId = null;\n    let unsubscribeStatus = null;\n    let unsubscribeTyping = null;\n    let chatUnsub = null;\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messagesContainer.value) {\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n        }\n      });\n    };\n    const goBackToChatList = () => {\n      router.push('/chatList');\n    };\n    const deleteMessage = messageId => {\n      messageToDelete.value = messageId;\n      showDeleteModal.value = true;\n    };\n    const confirmDelete = async () => {\n      if (!messageToDelete.value) return;\n      try {\n        const chatRef = doc(db, 'chats', chatId);\n        const chatDoc = await getDoc(chatRef);\n        if (chatDoc.exists()) {\n          const currentMessages = chatDoc.data().messages || [];\n          const updatedMessages = currentMessages.filter(id => id !== messageToDelete.value);\n          await updateDoc(chatRef, {\n            messages: updatedMessages\n          });\n          await deleteDoc(doc(db, 'chatMessages', messageToDelete.value));\n        }\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      } finally {\n        cancelDelete();\n      }\n    };\n    const cancelDelete = () => {\n      showDeleteModal.value = false;\n      messageToDelete.value = null;\n    };\n    async function fetchOtherUserData() {\n      try {\n        const chatDoc = await getDoc(doc(db, 'chats', chatId));\n        if (chatDoc.exists()) {\n          const chatData = chatDoc.data();\n          otherUserId = chatData.user1 === currentUser?.uid ? chatData.user2 : chatData.user1;\n          const userDoc = await getDoc(doc(db, 'users', otherUserId));\n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            otherUsername.value = userData.name;\n            otherUserPfp.value = userData.pfp; // Assuming 'pfp' is the field name\n            console.log('Fetched user data:', {\n              name: otherUsername.value,\n              pfp: otherUserPfp.value\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching other user data:\", error);\n      }\n    }\n    const setupPresence = async () => {\n      const rtdb = getDatabase();\n      const user = currentUser;\n      if (!user) return;\n      try {\n        const chatDoc = await getDoc(doc(db, 'chats', chatId));\n        if (!chatDoc.exists()) return;\n        const chatData = chatDoc.data();\n        otherUserId = chatData.user1 === user.uid ? chatData.user2 : chatData.user1;\n\n        // Current user's status\n        const userStatusRef = dbRef(rtdb, `status/${user.uid}`);\n        const userStatusConnectedRef = dbRef(rtdb, '.info/connected');\n\n        // Other user's references\n        const otherUserStatusRef = dbRef(rtdb, `status/${otherUserId}`);\n        const otherUserTypingRef = dbRef(rtdb, `status/${otherUserId}/typing`);\n\n        // Connection state\n        onValue(userStatusConnectedRef, snap => {\n          if (snap.val() === true) {\n            set(userStatusRef, {\n              state: 'online',\n              last_changed: serverTimestamp()\n            }).catch(e => console.error(\"Error setting status:\", e));\n            onDisconnect(userStatusRef).set({\n              state: 'offline',\n              last_changed: serverTimestamp()\n            });\n          }\n        });\n\n        // Other user's status\n        unsubscribeStatus = onValue(otherUserStatusRef, snapshot => {\n          const status = snapshot.val();\n          otherUserStatus.value = status?.state || 'offline';\n        }, error => {\n          console.error(\"Status listener error:\", error);\n        });\n\n        // Typing status\n        unsubscribeTyping = onValue(otherUserTypingRef, snapshot => {\n          isOtherUserTyping.value = snapshot.val() || false;\n        }, error => {\n          console.error(\"Typing listener error:\", error);\n        });\n      } catch (error) {\n        console.error(\"Error setting up presence:\", error);\n      }\n    };\n    const handleTyping = () => {\n      if (!currentUser || !otherUserId) return;\n      const rtdb = getDatabase();\n      const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\n      set(typingRef, true).catch(e => console.error(\"Error setting typing:\", e));\n      if (typingTimeout) clearTimeout(typingTimeout);\n      typingTimeout = setTimeout(() => {\n        set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\n      }, 3000);\n    };\n    const cancelImage = () => {\n      previewUrl.value = '';\n      // Clear the file input as well\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n    function isImageMessage(message) {\n      return typeof message === 'string' && (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\n    }\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      let date;\n      if (ts?.toDate) {\n        date = ts.toDate();\n      } else if (ts?.seconds) {\n        date = new Date(ts.seconds * 1000);\n      } else if (ts instanceof Date) {\n        date = ts;\n      } else {\n        console.warn(\"Unknown timestamp format:\", ts);\n        return '';\n      }\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      try {\n        if (!chatId) {\n          console.error(\"No chatId provided\");\n          return;\n        }\n        const chatDoc = await getDoc(doc(db, 'chats', chatId));\n        if (!chatDoc.exists()) {\n          console.error(\"Chat doesn't exist\");\n          return;\n        }\n        for (const id of ids) {\n          try {\n            if (!id || typeof id !== 'string') {\n              console.warn(\"Invalid message ID:\", id);\n              continue;\n            }\n            const messageDoc = await getDoc(doc(db, 'chatMessages', id));\n            if (messageDoc.exists()) {\n              const messageData = messageDoc.data();\n              messages.push({\n                id: messageDoc.id,\n                ...messageData,\n                timestamp: messageData.timestamp?.toDate?.() || new Date()\n              });\n            }\n          } catch (error) {\n            console.error(`Error loading message ${id}:`, error);\n          }\n        }\n        messages.sort((a, b) => a.timestamp - b.timestamp);\n        messageList.value = messages;\n        scrollToBottom();\n      } catch (error) {\n        console.error(\"Error loading messages:\", error);\n      }\n    }\n    async function sendCombinedMessage() {\n      const text = newMessage.value.trim();\n      const image = previewUrl.value;\n      if (!text && !image) return;\n      try {\n        const messageData = {\n          sender: currentUser?.uid,\n          message: image || text,\n          timestamp: serverTimestamp(),\n          chatId: chatId\n        };\n        const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\n        await updateDoc(doc(db, 'chats', chatId), {\n          messages: arrayUnion(newMsgRef.id),\n          lastUpdated: serverTimestamp()\n        });\n        newMessage.value = '';\n        previewUrl.value = '';\n        if (currentUser) {\n          const rtdb = getDatabase();\n          const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\n          set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n      scrollToBottom();\n    }\n    const onDrop = e => {\n      const file = e.dataTransfer.files[0];\n      if (file) convertToBase64(file);\n    };\n    const onFileChange = e => {\n      const file = e.target.files[0];\n      if (file) convertToBase64(file);\n    };\n    const convertToBase64 = file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        previewUrl.value = reader.result;\n      };\n      reader.readAsDataURL(file);\n    };\n    onMounted(async () => {\n      try {\n        await setupPresence();\n        await fetchOtherUserData();\n        console.log('User data fetched');\n        const chatRef = doc(db, 'chats', chatId);\n        chatUnsub = onSnapshot(chatRef, chatSnap => {\n          if (chatSnap.exists()) {\n            const chatData = chatSnap.data();\n            const messageIds = chatData.messages || [];\n            loadMessagesByIds(messageIds);\n          } else {\n            console.warn('Chat document does not exist');\n            messageList.value = [];\n          }\n        }, error => {\n          console.error(\"Chat listener error:\", error);\n        });\n        scrollToBottom();\n      } catch (error) {\n        console.error(\"Error initializing chat:\", error);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n      if (unsubscribeStatus && typeof unsubscribeStatus === 'function') {\n        try {\n          unsubscribeStatus();\n        } catch (e) {\n          console.warn(\"Error unsubscribing status:\", e);\n        }\n      }\n      if (unsubscribeTyping && typeof unsubscribeTyping === 'function') {\n        try {\n          unsubscribeTyping();\n        } catch (e) {\n          console.warn(\"Error unsubscribing typing:\", e);\n        }\n      }\n      if (typingTimeout) clearTimeout(typingTimeout);\n      if (currentUser) {\n        const rtdb = getDatabase();\n        const userStatusRef = dbRef(rtdb, `status/${currentUser.uid}`);\n        set(userStatusRef, {\n          state: 'offline',\n          last_changed: serverTimestamp()\n        }).catch(e => console.warn(\"Error setting offline status:\", e));\n      }\n    });\n    const __returned__ = {\n      router,\n      route,\n      chatId,\n      auth,\n      currentUser,\n      newMessage,\n      messageList,\n      previewUrl,\n      fileInput,\n      otherUserStatus,\n      otherUsername,\n      otherUserPfp,\n      isOtherUserTyping,\n      messagesContainer,\n      hoveredMessage,\n      showDeleteModal,\n      messageToDelete,\n      get typingTimeout() {\n        return typingTimeout;\n      },\n      set typingTimeout(v) {\n        typingTimeout = v;\n      },\n      get otherUserId() {\n        return otherUserId;\n      },\n      set otherUserId(v) {\n        otherUserId = v;\n      },\n      get unsubscribeStatus() {\n        return unsubscribeStatus;\n      },\n      set unsubscribeStatus(v) {\n        unsubscribeStatus = v;\n      },\n      get unsubscribeTyping() {\n        return unsubscribeTyping;\n      },\n      set unsubscribeTyping(v) {\n        unsubscribeTyping = v;\n      },\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      scrollToBottom,\n      goBackToChatList,\n      deleteMessage,\n      confirmDelete,\n      cancelDelete,\n      fetchOtherUserData,\n      setupPresence,\n      handleTyping,\n      cancelImage,\n      isImageMessage,\n      formatTimestamp,\n      loadMessagesByIds,\n      sendCombinedMessage,\n      onDrop,\n      onFileChange,\n      convertToBase64,\n      ref,\n      onMounted,\n      onBeforeUnmount,\n      nextTick,\n      get getDatabase() {\n        return getDatabase;\n      },\n      get dbRef() {\n        return dbRef;\n      },\n      get set() {\n        return set;\n      },\n      get onDisconnect() {\n        return onDisconnect;\n      },\n      get onValue() {\n        return onValue;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getAuth() {\n        return getAuth;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get deleteDoc() {\n        return deleteDoc;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","nextTick","getDatabase","dbRef","set","onDisconnect","onValue","useRoute","getAuth","useRouter","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","deleteDoc","db","router","route","chatId","params","auth","currentUser","newMessage","messageList","previewUrl","fileInput","otherUserStatus","otherUsername","otherUserPfp","isOtherUserTyping","messagesContainer","hoveredMessage","showDeleteModal","messageToDelete","typingTimeout","otherUserId","unsubscribeStatus","unsubscribeTyping","chatUnsub","scrollToBottom","value","scrollTop","scrollHeight","goBackToChatList","push","deleteMessage","messageId","confirmDelete","chatRef","chatDoc","exists","currentMessages","data","messages","updatedMessages","filter","id","error","console","cancelDelete","fetchOtherUserData","chatData","user1","uid","user2","userDoc","userData","name","pfp","log","setupPresence","rtdb","user","userStatusRef","userStatusConnectedRef","otherUserStatusRef","otherUserTypingRef","snap","val","state","last_changed","catch","e","snapshot","status","handleTyping","typingRef","clearTimeout","setTimeout","cancelImage","isImageMessage","message","startsWith","test","formatTimestamp","ts","date","toDate","seconds","Date","warn","toLocaleTimeString","hour","minute","loadMessagesByIds","ids","messageDoc","messageData","timestamp","sort","a","b","sendCombinedMessage","text","trim","image","sender","newMsgRef","lastUpdated","onDrop","file","dataTransfer","files","convertToBase64","onFileChange","target","reader","FileReader","onload","result","readAsDataURL","chatSnap","messageIds"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <button @click=\"goBackToChatList\" id=\"gobackbut\">Back to Chat List</button>\r\n    <div class=\"chat-header\">\r\n      <div class=\"user-info\">\r\n        <img \r\n          v-if=\"otherUserPfp\" \r\n          :src=\"otherUserPfp\" \r\n          alt=\"Profile picture\" \r\n          class=\"profile-picture\"\r\n        >\r\n        <div v-else class=\"profile-placeholder\">\r\n          {{ otherUsername.charAt(0) }}\r\n        </div>\r\n        <h3>Chat with {{ otherUsername }}</h3>\r\n      </div>\r\n      <small v-if=\"otherUserId\" class=\"status-indicator\">\r\n        {{ otherUserStatus || 'offline' }}\r\n        <span v-if=\"isOtherUserTyping\"> (typing...)</span>\r\n      </small>\r\n    </div>\r\n   \r\n\r\n    <div v-if=\"showDeleteModal\" class=\"modal-overlay\">\r\n    <div class=\"modal\">\r\n      <h3>Delete Message</h3>\r\n      <p>Are you sure you want to delete this message?</p>\r\n      <div class=\"modal-actions\">\r\n        <button @click=\"confirmDelete\" class=\"confirm-btn\">Delete</button>\r\n        <button @click=\"cancelDelete\" class=\"cancel-btn\">Cancel</button>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    \r\n    <ul ref=\"messagesContainer\">\r\n      <li\r\n        v-for=\"msg in messageList\"\r\n        :key=\"msg.id\"\r\n        :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n        @mouseover=\"hoveredMessage = msg.id\"\r\n          @mouseleave=\"hoveredMessage = null\"\r\n      >\r\n        <div v-if=\"isImageMessage(msg.message)\">\r\n          <img :src=\"msg.message\" alt=\"Image\" class=\"chat-image\" />\r\n        </div>\r\n        <div v-else>\r\n          {{ msg.message }}\r\n        </div>\r\n        <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        <button \r\n        v-if=\"msg.sender === currentUser?.uid && hoveredMessage === msg.id\"\r\n        @click.stop=\"deleteMessage(msg.id)\"\r\n        class=\"delete-button\"\r\n      >\r\n        <i class=\"fas fa-trash\"></i>\r\n      </button>\r\n\r\n      </li>\r\n    </ul>\r\n    <div class=\"input-area\">\r\n      <input \r\n        type=\"text\" \r\n        v-model=\"newMessage\"\r\n        @input=\"handleTyping\"\r\n        @keyup.enter=\"sendCombinedMessage\"\r\n      >\r\n      <button @click.prevent=\"sendCombinedMessage\">\r\n        <i class=\"fas fa-paper-plane\"></i>\r\n      </button>\r\n      <div @drop.prevent=\"onDrop\" @dragover.prevent>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileInput\"\r\n          accept=\"image/*\"\r\n          @change=\"onFileChange\"\r\n          style=\"display: none\"\r\n        />\r\n        <div v-if=\"previewUrl\" class=\"image-preview\">\r\n          <img :src=\"previewUrl\" alt=\"Preview\" class=\"chat-image\" />\r\n          <button @click=\"cancelImage\" class=\"cancel-button\">\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n        </div>\r\n        <button @click=\"$refs.fileInput.click()\" class=\"icon-button\">\r\n          <i class=\"fas fa-image\"></i>\r\n        </button>\r\n      </div>\r\n    </div> \r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount, nextTick } from 'vue';\r\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue} from 'firebase/database';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { useRouter } from 'vue-router';\r\nimport {\r\n  doc,\r\n  getDoc,\r\n  onSnapshot,\r\n  addDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n  collection,\r\n  serverTimestamp,\r\n  deleteDoc\r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst chatId = route.params.chatId;\r\nconst auth = getAuth();\r\nconst currentUser = auth.currentUser;\r\n\r\n// Refs\r\nconst newMessage = ref('');\r\nconst messageList = ref([]);\r\nconst previewUrl = ref('');\r\nconst fileInput = ref(null);\r\nconst otherUserStatus = ref('offline');\r\nconst otherUsername = ref('');\r\nconst otherUserPfp = ref(''); // Add this with your other refs\r\nconst isOtherUserTyping = ref(false);\r\nconst messagesContainer = ref(null);\r\nconst hoveredMessage = ref(null);\r\nconst showDeleteModal = ref(false);\r\nconst messageToDelete = ref(null);\r\nlet typingTimeout = null;\r\nlet otherUserId = null;\r\nlet unsubscribeStatus = null;\r\nlet unsubscribeTyping = null;\r\nlet chatUnsub = null;\r\n\r\n\r\nconst scrollToBottom = () => {\r\n  nextTick(() => {\r\n    if (messagesContainer.value) {\r\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\r\n    }\r\n  });\r\n};\r\n\r\nconst goBackToChatList = () => {\r\n  router.push('/chatList');\r\n};\r\n\r\n\r\nconst deleteMessage = (messageId) => {\r\nmessageToDelete.value = messageId;\r\nshowDeleteModal.value = true;\r\n};\r\n\r\n\r\nconst confirmDelete = async () => {\r\nif (!messageToDelete.value) return;\r\n\r\ntry {\r\n  const chatRef = doc(db, 'chats', chatId);\r\n  const chatDoc = await getDoc(chatRef);\r\n  \r\n  if (chatDoc.exists()) {\r\n    const currentMessages = chatDoc.data().messages || [];\r\n    const updatedMessages = currentMessages.filter(id => id !== messageToDelete.value);\r\n    \r\n    await updateDoc(chatRef, {\r\n      messages: updatedMessages\r\n    });\r\n    \r\n    await deleteDoc(doc(db, 'chatMessages', messageToDelete.value));\r\n    \r\n    \r\n  }\r\n} catch (error) {\r\n  console.error('Error deleting message:', error);\r\n} finally {\r\n  cancelDelete();\r\n}\r\n};\r\n\r\nconst cancelDelete = () => {\r\nshowDeleteModal.value = false;\r\nmessageToDelete.value = null;\r\n};\r\n\r\nasync function fetchOtherUserData() {\r\n  try {\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (chatDoc.exists()) {\r\n      const chatData = chatDoc.data();\r\n      otherUserId = chatData.user1 === currentUser?.uid ? chatData.user2 : chatData.user1;\r\n      \r\n      const userDoc = await getDoc(doc(db, 'users', otherUserId));\r\n      if (userDoc.exists()) {\r\n        const userData = userDoc.data();\r\n        otherUsername.value = userData.name;\r\n        otherUserPfp.value = userData.pfp; // Assuming 'pfp' is the field name\r\n        console.log('Fetched user data:', { \r\n          name: otherUsername.value, \r\n          pfp: otherUserPfp.value \r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching other user data:\", error);\r\n  }\r\n}\r\n\r\nconst setupPresence = async () => {\r\n  const rtdb = getDatabase();\r\n  const user = currentUser;\r\n  if (!user) return;\r\n\r\n  try {\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) return;\r\n\r\n    const chatData = chatDoc.data();\r\n    otherUserId = chatData.user1 === user.uid ? chatData.user2 : chatData.user1;\r\n\r\n    // Current user's status\r\n    const userStatusRef = dbRef(rtdb, `status/${user.uid}`);\r\n    const userStatusConnectedRef = dbRef(rtdb, '.info/connected');\r\n    \r\n    // Other user's references\r\n    const otherUserStatusRef = dbRef(rtdb, `status/${otherUserId}`);\r\n    const otherUserTypingRef = dbRef(rtdb, `status/${otherUserId}/typing`);\r\n\r\n    // Connection state\r\n    onValue(userStatusConnectedRef, (snap) => {\r\n      if (snap.val() === true) {\r\n        set(userStatusRef, {\r\n          state: 'online',\r\n          last_changed: serverTimestamp(),\r\n        }).catch(e => console.error(\"Error setting status:\", e));\r\n\r\n        onDisconnect(userStatusRef).set({\r\n          state: 'offline',\r\n          last_changed: serverTimestamp(),\r\n        });\r\n      }\r\n    });\r\n\r\n    // Other user's status\r\n    unsubscribeStatus = onValue(otherUserStatusRef, (snapshot) => {\r\n      const status = snapshot.val();\r\n      otherUserStatus.value = status?.state || 'offline';\r\n    }, (error) => {\r\n      console.error(\"Status listener error:\", error);\r\n    });\r\n\r\n    // Typing status\r\n    unsubscribeTyping = onValue(otherUserTypingRef, (snapshot) => {\r\n      isOtherUserTyping.value = snapshot.val() || false;\r\n    }, (error) => {\r\n      console.error(\"Typing listener error:\", error);\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error setting up presence:\", error);\r\n  }\r\n};\r\n\r\nconst handleTyping = () => {\r\n  if (!currentUser || !otherUserId) return;\r\n  \r\n  const rtdb = getDatabase();\r\n  const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n  \r\n  set(typingRef, true).catch(e => console.error(\"Error setting typing:\", e));\r\n  \r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  typingTimeout = setTimeout(() => {\r\n    set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\r\n  }, 3000);\r\n};\r\n\r\nconst cancelImage = () => {\r\n  previewUrl.value = '';\r\n  // Clear the file input as well\r\n  if (fileInput.value) {\r\n    fileInput.value.value = '';\r\n  }\r\n};\r\n\r\nfunction isImageMessage(message) {\r\n  return typeof message === 'string' &&\r\n    (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\r\n}\r\n\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n\r\n  let date;\r\n  \r\n  if (ts?.toDate) {\r\n    date = ts.toDate();\r\n  } else if (ts?.seconds) {\r\n    date = new Date(ts.seconds * 1000);\r\n  } else if (ts instanceof Date) {\r\n    date = ts;\r\n  } else {\r\n    console.warn(\"Unknown timestamp format:\", ts);\r\n    return '';\r\n  }\r\n\r\n  return date.toLocaleTimeString([], { \r\n    hour: '2-digit', \r\n    minute: '2-digit' \r\n  });\r\n}\r\n\r\nasync function loadMessagesByIds(ids) {\r\n  const messages = [];\r\n  try {\r\n    if (!chatId) {\r\n      console.error(\"No chatId provided\");\r\n      return;\r\n    }\r\n\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) {\r\n      console.error(\"Chat doesn't exist\");\r\n      return;\r\n    }\r\n\r\n    for (const id of ids) {\r\n      try {\r\n        if (!id || typeof id !== 'string') {\r\n          console.warn(\"Invalid message ID:\", id);\r\n          continue;\r\n        }\r\n\r\n        const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n        if (messageDoc.exists()) {\r\n          const messageData = messageDoc.data();\r\n          messages.push({\r\n            id: messageDoc.id,\r\n            ...messageData,\r\n            timestamp: messageData.timestamp?.toDate?.() || new Date()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error loading message ${id}:`, error);\r\n      }\r\n    }\r\n\r\n    messages.sort((a, b) => a.timestamp - b.timestamp);\r\n    messageList.value = messages;\r\n    scrollToBottom(); \r\n  } catch (error) {\r\n    console.error(\"Error loading messages:\", error);\r\n  }\r\n}\r\n\r\nasync function sendCombinedMessage() {\r\n  const text = newMessage.value.trim();\r\n  const image = previewUrl.value;\r\n\r\n  if (!text && !image) return;\r\n\r\n  try {\r\n    const messageData = {\r\n      sender: currentUser?.uid,\r\n      message: image || text,\r\n      timestamp: serverTimestamp(),\r\n      chatId: chatId\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id),\r\n      lastUpdated: serverTimestamp()\r\n    });\r\n\r\n    newMessage.value = '';\r\n    previewUrl.value = '';\r\n    \r\n    if (currentUser) {\r\n      const rtdb = getDatabase();\r\n      const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n      set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n  }\r\n  scrollToBottom();\r\n}\r\n\r\nconst onDrop = (e) => {\r\n  const file = e.dataTransfer.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\nconst onFileChange = (e) => {\r\n  const file = e.target.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\nconst convertToBase64 = (file) => {\r\n  const reader = new FileReader();\r\n  reader.onload = () => {\r\n    previewUrl.value = reader.result;\r\n  };\r\n  reader.readAsDataURL(file);\r\n};\r\n\r\nonMounted(async () => {\r\n  try {\r\n    await setupPresence();\r\n    await fetchOtherUserData();\r\n    console.log('User data fetched');\r\n    const chatRef = doc(db, 'chats', chatId);\r\n    chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n      if (chatSnap.exists()) {\r\n        const chatData = chatSnap.data();\r\n        const messageIds = chatData.messages || [];\r\n        loadMessagesByIds(messageIds);\r\n      } else {\r\n        console.warn('Chat document does not exist');\r\n        messageList.value = [];\r\n      }\r\n    }, (error) => {\r\n      console.error(\"Chat listener error:\", error);\r\n    });\r\n    scrollToBottom();\r\n  } catch (error) {\r\n    console.error(\"Error initializing chat:\", error);\r\n  }\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (chatUnsub) chatUnsub();\r\n  \r\n  if (unsubscribeStatus && typeof unsubscribeStatus === 'function') {\r\n    try {\r\n      unsubscribeStatus();\r\n    } catch (e) {\r\n      console.warn(\"Error unsubscribing status:\", e);\r\n    }\r\n  }\r\n  \r\n  if (unsubscribeTyping && typeof unsubscribeTyping === 'function') {\r\n    try {\r\n      unsubscribeTyping();\r\n    } catch (e) {\r\n      console.warn(\"Error unsubscribing typing:\", e);\r\n    }\r\n  }\r\n  \r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  if (currentUser) {\r\n    const rtdb = getDatabase();\r\n    const userStatusRef = dbRef(rtdb, `status/${currentUser.uid}`);\r\n    set(userStatusRef, {\r\n      state: 'offline',\r\n      last_changed: serverTimestamp(),\r\n    }).catch(e => console.warn(\"Error setting offline status:\", e));\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 40px auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #ffffff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n#gobackbut{\r\n  width: 150px;\r\n  height: 35px;\r\n  border-radius: 10px;\r\n}\r\n.chat-header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.profile-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.profile-placeholder {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n}\r\n\r\n.chat-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\nul {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 10px;\r\n  margin-bottom: 20px;\r\n  max-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n  max-width: 75%;\r\n  padding: 10px 14px;\r\n  border-radius: 20px;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n  line-height: 1.5;\r\n  font-size: 0.95rem;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.sent {\r\n  align-self: flex-end;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.received {\r\n  align-self: flex-start;\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.chat-image {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.7rem;\r\n  margin-top: 4px;\r\n  opacity: 0.7;\r\n  text-align: right;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: auto;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  padding: 10px 14px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\ninput[type=\"text\"]:focus {\r\n  border-color: #4caf50;\r\n}\r\n\r\nbutton {\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 42px;\r\n  height: 42px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #43a047;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n.icon-button {\r\n  background-color: #2196f3;\r\n  margin-left: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  background-color: #1e88e5;\r\n}\r\n.image-preview {\r\n  position: relative;\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.cancel-button {\r\n  position: absolute;\r\n  top: -10px;\r\n  right: -10px;\r\n  background-color: #ff4444;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\n\r\n.cancel-button:hover {\r\n  background-color: #cc0000;\r\n}\r\n\r\n.cancel-button i {\r\n  font-size: 12px;\r\n}\r\n\r\n.delete-button {\r\n  position: absolute;\r\n  top: -8px;\r\n  right: -8px;\r\n  background-color: #ff4444;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  opacity: 0.8;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.delete-button:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.delete-button i {\r\n  font-size: 12px;\r\n}\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  max-width: 400px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.modal h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n}\r\n\r\n.modal p {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.modal-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n}\r\n\r\n.confirm-btn {\r\n  background-color: #ff4444;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 50px;\r\n}\r\n\r\n.confirm-btn:hover {\r\n  background-color: #cc0000;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 50px;\r\n}\r\n\r\n.cancel-btn:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.image-preview img {\r\n  max-width: 120px;\r\n  border-radius: 12px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.status-indicator {\r\n  display: block;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  color: #666;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}