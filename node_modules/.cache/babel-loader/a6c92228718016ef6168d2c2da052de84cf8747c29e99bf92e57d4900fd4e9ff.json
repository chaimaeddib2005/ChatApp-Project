{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onBeforeUnmount } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { doc, getDoc, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// const route = useRoute();\n\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const user1 = route.params.user1;\n    const user2 = route.params.user2;\n    const messageList = ref([]);\n    let chatUnsub = null;\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      for (const id of ids) {\n        const messageDoc = await getDoc(doc(db, 'messages', id));\n        if (messageDoc.exists()) {\n          messages.push({\n            id: messageDoc.id,\n            ...messageDoc.data()\n          });\n        }\n      }\n      messageList.value = messages;\n    }\n    const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`;\n    const chatRef = doc(db, 'chats', chatId);\n    chatUnsub = onSnapshot(chatRef, chatSnap => {\n      if (chatSnap.exists()) {\n        const chatData = chatSnap.data();\n        const messageIds = chatData.messages || [];\n        loadMessagesByIds(messageIds);\n      } else {\n        console.log('Chat does not exist.');\n        messageList.value = [];\n      }\n    });\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n    });\n    const __returned__ = {\n      user1,\n      user2,\n      messageList,\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      loadMessagesByIds,\n      chatId,\n      chatRef,\n      ref,\n      onBeforeUnmount,\n      get useRoute() {\n        return useRoute;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onBeforeUnmount","useRoute","doc","getDoc","onSnapshot","db","user1","route","params","user2","messageList","chatUnsub","loadMessagesByIds","ids","messages","id","messageDoc","exists","push","data","value","chatId","chatRef","chatSnap","chatData","messageIds","console","log"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.id\">\r\n          {{ msg.message }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref,  onBeforeUnmount } from 'vue';\r\n  import { useRoute } from 'vue-router';\r\n  import { doc, getDoc, onSnapshot} from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  \r\n // const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  \r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'messages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`; \r\n  \r\n  const chatRef = doc(db, 'chats', chatId);\r\n  \r\n  chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      console.log('Chat does not exist.');\r\n      messageList.value = [];\r\n    }\r\n  });\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n  "],"mappings":";AAYE,SAASA,GAAG,EAAGC,eAAe,QAAQ,KAAK;AAC3C,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,GAAG,EAAEC,MAAM,EAAEC,UAAU,QAAO,oBAAoB;AAC3D,SAASC,EAAE,QAAQ,aAAa;;AAEjC;;;;;;;;IACC,MAAMC,KAAK,GAAGC,KAAK,CAACC,MAAM,CAACF,KAAK;IAChC,MAAMG,KAAK,GAAGF,KAAK,CAACC,MAAM,CAACC,KAAK;IAEhC,MAAMC,WAAW,GAAGX,GAAG,CAAC,EAAE,CAAC;IAC3B,IAAIY,SAAS,GAAG,IAAI;IAEpB,eAAeC,iBAAiBA,CAACC,GAAG,EAAE;MACpC,MAAMC,QAAQ,GAAG,EAAE;MACnB,KAAK,MAAMC,EAAE,IAAIF,GAAG,EAAE;QACpB,MAAMG,UAAU,GAAG,MAAMb,MAAM,CAACD,GAAG,CAACG,EAAE,EAAE,UAAU,EAAEU,EAAE,CAAC,CAAC;QACxD,IAAIC,UAAU,CAACC,MAAM,CAAC,CAAC,EAAE;UACvBH,QAAQ,CAACI,IAAI,CAAC;YAAEH,EAAE,EAAEC,UAAU,CAACD,EAAE;YAAE,GAAGC,UAAU,CAACG,IAAI,CAAC;UAAE,CAAC,CAAC;QAC5D;MACF;MACAT,WAAW,CAACU,KAAK,GAAGN,QAAQ;IAC9B;IAEA,MAAMO,MAAM,GAAGf,KAAK,GAAGG,KAAK,GAAG,GAAGH,KAAK,IAAIG,KAAK,EAAE,GAAG,GAAGA,KAAK,IAAIH,KAAK,EAAE;IAExE,MAAMgB,OAAO,GAAGpB,GAAG,CAACG,EAAE,EAAE,OAAO,EAAEgB,MAAM,CAAC;IAExCV,SAAS,GAAGP,UAAU,CAACkB,OAAO,EAAGC,QAAQ,IAAK;MAC5C,IAAIA,QAAQ,CAACN,MAAM,CAAC,CAAC,EAAE;QACrB,MAAMO,QAAQ,GAAGD,QAAQ,CAACJ,IAAI,CAAC,CAAC;QAChC,MAAMM,UAAU,GAAGD,QAAQ,CAACV,QAAQ,IAAI,EAAE;QAC1CF,iBAAiB,CAACa,UAAU,CAAC;MAC/B,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnCjB,WAAW,CAACU,KAAK,GAAG,EAAE;MACxB;IACF,CAAC,CAAC;IAEFpB,eAAe,CAAC,MAAM;MACpB,IAAIW,SAAS,EAAEA,SAAS,CAAC,CAAC;IAC5B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}