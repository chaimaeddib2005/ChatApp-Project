{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue } from 'firebase/database';\nimport { useRoute } from 'vue-router';\nimport { getAuth } from 'firebase/auth';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Route & Auth\n\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const chatId = route.params.chatId;\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    onMounted(async () => {\n      const db = getDatabase();\n      const user = getAuth().currentUser;\n      if (!user) {\n        console.error(\"User not authenticated yet.\");\n        return;\n      }\n\n      // Fetch the chat data to determine the other user\n      const chatDoc = await getDoc(doc(db, 'chats', chatId));\n      if (!chatDoc.exists()) {\n        console.error(\"Chat not found.\");\n        return;\n      }\n      const chatData = chatDoc.data();\n      const otherUser = chatData.user1 === user.uid ? chatData.user2 : chatData.user1; // Define the other user here\n\n      // Define the status reference for both the current and other user\n      const userStatusRef = dbRef(db, `/status/${user.uid}`);\n      const otherUserStatusRef = dbRef(db, `/status/${otherUser}`);\n\n      // Set the current user's status to \"online\"\n      set(userStatusRef, {\n        state: 'online',\n        last_changed: Date.now()\n      });\n\n      // Set the other user's status to \"offline\" when they disconnect\n      onDisconnect(otherUserStatusRef).set({\n        state: 'offline',\n        last_changed: Date.now()\n      });\n\n      // Set the current user's status to \"offline\" when they disconnect\n      onDisconnect(userStatusRef).set({\n        state: 'offline',\n        last_changed: Date.now()\n      });\n    });\n    const otherUserStatus = ref('offline');\n    let otherUserId = null;\n    onMounted(async () => {\n      const chatDoc = await getDoc(doc(db, 'chats', chatId));\n      if (chatDoc.exists()) {\n        const chatData = chatDoc.data();\n\n        // Determine the other user\n        otherUserId = chatData.user1 === currentUser?.uid ? chatData.user2 : chatData.user1;\n\n        // Start listening to their status in Realtime DB\n        const statusRef = dbRef(getDatabase(), `/statut/${otherUserId}`);\n        onValue(statusRef, snapshot => {\n          const status = snapshot.val();\n          otherUserStatus.value = status?.state || 'offline';\n        });\n      }\n    });\n\n    // Refs\n    const newMessage = ref('');\n    const messageList = ref([]);\n    const previewUrl = ref('');\n    const fileInput = ref(null);\n\n    // Image check helper\n    function isImageMessage(message) {\n      return typeof message === 'string' && (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\n    }\n\n    // Timestamp formatter\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      const date = ts.toDate();\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n\n    // Load messages by their IDs\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      for (const id of ids) {\n        const messageDoc = await getDoc(doc(db, 'chatMessages', id));\n        if (messageDoc.exists()) {\n          messages.push({\n            id: messageDoc.id,\n            ...messageDoc.data()\n          });\n        }\n      }\n      messageList.value = messages;\n    }\n\n    // Send message (text or image)\n    async function sendCombinedMessage() {\n      const text = newMessage.value.trim();\n      const image = previewUrl.value;\n      if (!text && !image) return;\n      try {\n        const chatDoc = await getDoc(doc(db, 'chats', chatId));\n        if (!chatDoc.exists()) {\n          console.error('Chat not found');\n          return;\n        }\n        const chatData = chatDoc.data();\n        const otherUser = chatData.user1 === currentUser?.uid ? chatData.user2 : chatData.user1;\n        const messageData = {\n          sender: currentUser?.uid,\n          receiver: otherUser,\n          message: image || text,\n          timestamp: serverTimestamp()\n        };\n        const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\n        await updateDoc(doc(db, 'chats', chatId), {\n          messages: arrayUnion(newMsgRef.id)\n        });\n\n        // Clear input fields\n        newMessage.value = '';\n        previewUrl.value = '';\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n\n    // Drag & drop handler\n    const onDrop = e => {\n      const file = e.dataTransfer.files[0];\n      if (file) convertToBase64(file);\n    };\n\n    // File input handler\n    const onFileChange = e => {\n      const file = e.target.files[0];\n      if (file) convertToBase64(file);\n    };\n\n    // Convert image to base64 for preview\n    const convertToBase64 = file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        previewUrl.value = reader.result;\n      };\n      reader.readAsDataURL(file);\n    };\n\n    // Subscribe to chat updates on mount\n    let chatUnsub = null;\n    onMounted(async () => {\n      const chatRef = doc(db, 'chats', chatId);\n      chatUnsub = onSnapshot(chatRef, chatSnap => {\n        if (chatSnap.exists()) {\n          const chatData = chatSnap.data();\n          const messageIds = chatData.messages || [];\n          loadMessagesByIds(messageIds);\n        } else {\n          console.warn('Chat document does not exist');\n          messageList.value = [];\n        }\n      });\n    });\n\n    // Cleanup on unmount\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n    });\n    const __returned__ = {\n      route,\n      chatId,\n      auth,\n      currentUser,\n      otherUserStatus,\n      get otherUserId() {\n        return otherUserId;\n      },\n      set otherUserId(v) {\n        otherUserId = v;\n      },\n      newMessage,\n      messageList,\n      previewUrl,\n      fileInput,\n      isImageMessage,\n      formatTimestamp,\n      loadMessagesByIds,\n      sendCombinedMessage,\n      onDrop,\n      onFileChange,\n      convertToBase64,\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      ref,\n      onMounted,\n      onBeforeUnmount,\n      get getDatabase() {\n        return getDatabase;\n      },\n      get dbRef() {\n        return dbRef;\n      },\n      get set() {\n        return set;\n      },\n      get onDisconnect() {\n        return onDisconnect;\n      },\n      get onValue() {\n        return onValue;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getAuth() {\n        return getAuth;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","getDatabase","dbRef","set","onDisconnect","onValue","useRoute","getAuth","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","db","route","chatId","params","auth","currentUser","user","console","error","chatDoc","exists","chatData","data","otherUser","user1","uid","user2","userStatusRef","otherUserStatusRef","state","last_changed","Date","now","otherUserStatus","otherUserId","statusRef","snapshot","status","val","value","newMessage","messageList","previewUrl","fileInput","isImageMessage","message","startsWith","test","formatTimestamp","ts","date","toDate","toLocaleTimeString","hour","minute","loadMessagesByIds","ids","messages","id","messageDoc","push","sendCombinedMessage","text","trim","image","messageData","sender","receiver","timestamp","newMsgRef","onDrop","e","file","dataTransfer","files","convertToBase64","onFileChange","target","reader","FileReader","onload","result","readAsDataURL","chatUnsub","chatRef","chatSnap","messageIds","warn"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <small v-if=\"msg && msg.sender !== currentUser?.uid\" class=\"status-indicator\">\r\n        {{ otherUserStatus === 'online' ? 'Online' : 'Offline' }}\r\n      </small>\r\n      <ul>\r\n        <li\r\n          v-for=\"msg in messageList\"\r\n          :key=\"msg.id\"\r\n          :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n        >\r\n          <div v-if=\"isImageMessage(msg.message)\">\r\n            <img :src=\"msg.message\" alt=\"Image\" class=\"chat-image\" />\r\n          </div>\r\n          <div v-else>\r\n            {{ msg.message }}\r\n          </div>\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n\r\n      </ul>\r\n      <div class=\"input-area\">\r\n          <input type=\"text\" v-model=\"newMessage\">\r\n        <button @click.prevent=\"sendCombinedMessage\">\r\n              <i class=\"fas fa-paper-plane\"></i>\r\n        </button>\r\n        <div @drop.prevent=\"onDrop\" @dragover.prevent>\r\n        <input\r\n        type=\"file\"\r\n        ref=\"fileInput\"\r\n        accept=\"image/*\"\r\n        @change=\"onFileChange\"\r\n        style=\"display: none\"\r\n        />\r\n        <div v-if=\"previewUrl\" class=\"image-preview\">\r\n          <img :src=\"previewUrl\" alt=\"Preview\" class=\"chat-image\" />\r\n        </div>\r\n\r\n      <!-- Custom upload button -->\r\n        <button @click=\"$refs.fileInput.click()\" class=\"icon-button\">\r\n          <i class=\"fas fa-image\"></i>\r\n        </button>\r\n\r\n      </div>\r\n\r\n    </div> \r\n\r\n      \r\n\r\n    </div>\r\n  </template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue  } from 'firebase/database';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAuth } from 'firebase/auth';\r\nimport {\r\n  doc,\r\n  getDoc,\r\n  onSnapshot,\r\n  addDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n  collection,\r\n  serverTimestamp,\r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\n// Route & Auth\r\nconst route = useRoute();\r\nconst chatId = route.params.chatId;\r\nconst auth = getAuth();\r\nconst currentUser = auth.currentUser;\r\n\r\nonMounted(async () => {\r\n  const db = getDatabase();\r\n\r\n  const user = getAuth().currentUser;\r\n  if (!user) {\r\n    console.error(\"User not authenticated yet.\");\r\n    return;\r\n  }\r\n\r\n  // Fetch the chat data to determine the other user\r\n  const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n  if (!chatDoc.exists()) {\r\n    console.error(\"Chat not found.\");\r\n    return;\r\n  }\r\n\r\n  const chatData = chatDoc.data();\r\n  const otherUser = chatData.user1 === user.uid ? chatData.user2 : chatData.user1; // Define the other user here\r\n\r\n  // Define the status reference for both the current and other user\r\n  const userStatusRef = dbRef(db, `/status/${user.uid}`);\r\n  const otherUserStatusRef = dbRef(db, `/status/${otherUser}`);\r\n\r\n  // Set the current user's status to \"online\"\r\n  set(userStatusRef, {\r\n    state: 'online',\r\n    last_changed: Date.now(),\r\n  });\r\n\r\n  // Set the other user's status to \"offline\" when they disconnect\r\n  onDisconnect(otherUserStatusRef).set({\r\n    state: 'offline',\r\n    last_changed: Date.now(),\r\n  });\r\n\r\n  // Set the current user's status to \"offline\" when they disconnect\r\n  onDisconnect(userStatusRef).set({\r\n    state: 'offline',\r\n    last_changed: Date.now(),\r\n  });\r\n});\r\n\r\n\r\nconst otherUserStatus = ref('offline');\r\nlet otherUserId = null;\r\n\r\nonMounted(async () => {\r\n  const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n  if (chatDoc.exists()) {\r\n    const chatData = chatDoc.data();\r\n\r\n    // Determine the other user\r\n    otherUserId = chatData.user1 === currentUser?.uid ? chatData.user2 : chatData.user1;\r\n\r\n    // Start listening to their status in Realtime DB\r\n    const statusRef = dbRef(getDatabase(), `/statut/${otherUserId}`);\r\n    onValue(statusRef, (snapshot) => {\r\n      const status = snapshot.val();\r\n      otherUserStatus.value = status?.state || 'offline';\r\n    });\r\n  }\r\n});\r\n\r\n// Refs\r\nconst newMessage = ref('');\r\nconst messageList = ref([]);\r\nconst previewUrl = ref('');\r\nconst fileInput = ref(null);\r\n\r\n// Image check helper\r\nfunction isImageMessage(message) {\r\n  return typeof message === 'string' &&\r\n    (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\r\n}\r\n\r\n// Timestamp formatter\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n  const date = ts.toDate();\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n\r\n// Load messages by their IDs\r\nasync function loadMessagesByIds(ids) {\r\n  const messages = [];\r\n  for (const id of ids) {\r\n    const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n    if (messageDoc.exists()) {\r\n      messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n    }\r\n  }\r\n  messageList.value = messages;\r\n}\r\n\r\n// Send message (text or image)\r\nasync function sendCombinedMessage() {\r\n  const text = newMessage.value.trim();\r\n  const image = previewUrl.value;\r\n\r\n  if (!text && !image) return;\r\n\r\n  try {\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) {\r\n      console.error('Chat not found');\r\n      return;\r\n    }\r\n\r\n    const chatData = chatDoc.data();\r\n    const otherUser = chatData.user1 === currentUser?.uid ? chatData.user2 : chatData.user1;\r\n\r\n    const messageData = {\r\n      sender: currentUser?.uid,\r\n      receiver: otherUser,\r\n      message: image || text,\r\n      timestamp: serverTimestamp(),\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id),\r\n    });\r\n\r\n    // Clear input fields\r\n    newMessage.value = '';\r\n    previewUrl.value = '';\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n  }\r\n}\r\n\r\n// Drag & drop handler\r\nconst onDrop = (e) => {\r\n  const file = e.dataTransfer.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\n// File input handler\r\nconst onFileChange = (e) => {\r\n  const file = e.target.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\n// Convert image to base64 for preview\r\nconst convertToBase64 = (file) => {\r\n  const reader = new FileReader();\r\n  reader.onload = () => {\r\n    previewUrl.value = reader.result;\r\n  };\r\n  reader.readAsDataURL(file);\r\n};\r\n\r\n// Subscribe to chat updates on mount\r\nlet chatUnsub = null;\r\nonMounted(async () => {\r\n  const chatRef = doc(db, 'chats', chatId);\r\n  chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      console.warn('Chat document does not exist');\r\n      messageList.value = [];\r\n    }\r\n  });\r\n});\r\n\r\n// Cleanup on unmount\r\nonBeforeUnmount(() => {\r\n  if (chatUnsub) chatUnsub();\r\n});\r\n</script>\r\n\r\n\r\n  <style scoped>\r\n \r\n .container {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 40px auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #ffffff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n  margin-bottom: 16px;\r\n  color: #333;\r\n}\r\n\r\nul {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 10px;\r\n  margin-bottom: 20px;\r\n  max-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n/* Message bubble */\r\nli {\r\n  list-style: none;\r\n  max-width: 75%;\r\n  padding: 10px 14px;\r\n  border-radius: 20px;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n  line-height: 1.5;\r\n  font-size: 0.95rem;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.sent {\r\n  align-self: flex-end;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.received {\r\n  align-self: flex-start;\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.chat-image {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.7rem;\r\n  margin-top: 4px;\r\n  opacity: 0.7;\r\n  text-align: right;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: auto;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  padding: 10px 14px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\ninput[type=\"text\"]:focus {\r\n  border-color: #4caf50;\r\n}\r\n\r\nbutton {\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 42px;\r\n  height: 42px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #43a047;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n.icon-button {\r\n  background-color: #2196f3;\r\n  margin-left: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  background-color: #1e88e5;\r\n}\r\n\r\n.image-preview {\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.image-preview img {\r\n  max-width: 120px;\r\n  border-radius: 12px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n  \r\n\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}