{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"timestamp\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Chat between \" + _toDisplayString($setup.user1) + \" and \" + _toDisplayString($setup.user2), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messageList, msg => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: msg.message,\n      class: _normalizeClass(msg.sender === $setup.currentUser?.uid ? 'sent' : 'received')\n    }, [_createTextVNode(_toDisplayString(msg.message) + \" \", 1 /* TEXT */), _createElementVNode(\"small\", _hoisted_1, _toDisplayString($setup.formatTimestamp(msg.timestamp)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newMessage = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _withModifiers($setup.sendMessage, [\"prevent\"])\n  }, _cache[1] || (_cache[1] = [_createElementVNode(\"i\", {\n    class: \"fas fa-paper-plane\"\n  }, null, -1 /* HOISTED */)]))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$setup","user1","user2","_Fragment","_renderList","messageList","msg","key","message","_normalizeClass","sender","currentUser","uid","_createTextVNode","_hoisted_1","formatTimestamp","timestamp","type","_cache","$event","newMessage","onClick","_withModifiers","sendMessage"],"sources":["C:\\Users\\khadi\\ChatApp-Project\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.message\" :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\">\r\n          {{ msg.message }}\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n      </ul>\r\n      <input type=\"text\" v-model=\"newMessage\">\r\n      <button @click.prevent=\"sendMessage\">\r\n            <i class=\"fas fa-paper-plane\"></i>\r\n    </button>\r\n\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  //:class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n  import { ref,  onBeforeUnmount } from 'vue';\r\n  //import { useRoute } from 'vue-router';\r\n  import { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  import { useRoute } from 'vue-router';\r\n  import { getAuth } from 'firebase/auth';\r\n\r\n  let newMessage = \"\";\r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n const auth = getAuth();\r\nconst currentUser = auth.currentUser;\r\n\r\n\r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'messages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  //const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`; \r\n  const chatId = \"6HaLRtFkMgZvhMIVC2PQ\";\r\n  \r\n  const chatRef = doc(db, 'chats', chatId);\r\n  \r\n  chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      console.log('Chat does not exist.');\r\n      messageList.value = [];\r\n    }\r\n  });\r\n\r\n  async function sendMessage() {\r\n  if (!newMessage.trim()) return;\r\n\r\n  try {\r\n    // 1. Add message to messages collection\r\n    const messageData = {\r\n      sender: user1,\r\n      receiver: user2,\r\n      message: newMessage,\r\n      timestamp: serverTimestamp()\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'messages'), messageData);\r\n\r\n    // 2. Update the chat document to include this message ID\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id)\r\n    });\r\n\r\n    // 3. Clear the input field\r\n    newMessage = \"\";\r\n\r\n  } catch (error) {\r\n    console.error(\"Error sending message:\", error);\r\n  }\r\n}\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n  const date = ts.toDate(); // converts Firestore Timestamp to JS Date\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n\r\n\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n\r\n  \r\n  <style scoped>\r\n  ul{\r\n    max-width: 40%;\r\n  }\r\n  li{\r\n    list-style: none;\r\n    width: 100px;\r\n  }\r\n  .sent {\r\n    text-align: right;\r\n    background-color: #daf8cb;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .received {\r\n    text-align: left;\r\n    background-color: #f1f0f0;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-right: auto;\r\n  }\r\n  button{\r\n    border: none;\r\n    background-color: rgb(72, 111, 72);\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  .timestamp {\r\n  font-size: 0.75rem;\r\n  color: #888;\r\n  display: block;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n</style>\r\n  "],"mappings":";;EAMiBA,KAAK,EAAC;AAAW;;uBAL9BC,mBAAA,CAaM,cAZJC,mBAAA,CAAiD,YAA7C,eAAa,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,IAAG,OAAK,GAAAF,gBAAA,CAAGC,MAAA,CAAAE,KAAK,kBACzCJ,mBAAA,CAKK,c,kBAJHD,mBAAA,CAGKM,SAAA,QAPbC,WAAA,CAI0BJ,MAAA,CAAAK,WAAW,EAAlBC,GAAG;yBAAdT,mBAAA,CAGK;MAH2BU,GAAG,EAAED,GAAG,CAACE,OAAO;MAAGZ,KAAK,EAJhEa,eAAA,CAIkEH,GAAG,CAACI,MAAM,KAAKV,MAAA,CAAAW,WAAW,EAAEC,GAAG;QAJjGC,gBAAA,CAAAd,gBAAA,CAKaO,GAAG,CAACE,OAAO,IAAG,GACjB,iBAAAV,mBAAA,CAAqE,SAArEgB,UAAqE,EAAAf,gBAAA,CAAzCC,MAAA,CAAAe,eAAe,CAACT,GAAG,CAACU,SAAS,kB;oDAG7DlB,mBAAA,CAAwC;IAAjCmB,IAAI,EAAC,MAAM;IATxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IASkCnB,MAAA,CAAAoB,UAAU,GAAAD,MAAA;iDAAVnB,MAAA,CAAAoB,UAAU,E,GACtCtB,mBAAA,CAEO;IAFEuB,OAAK,EAVpBC,cAAA,CAU8BtB,MAAA,CAAAuB,WAAW;gCAC7BzB,mBAAA,CAAkC;IAA/BF,KAAK,EAAC;EAAoB,2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}