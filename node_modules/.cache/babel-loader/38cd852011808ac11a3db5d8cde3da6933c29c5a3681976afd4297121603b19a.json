{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onBeforeUnmount, onMounted } from 'vue';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, getDocs } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { useRoute } from 'vue-router';\nimport { getAuth } from 'firebase/auth';\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const user1 = route.params.user1;\n    const user2 = route.params.user2;\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    const newMessage = ref(\"\");\n    const messageList = ref([]);\n    let chatUnsub = null;\n    let chatId = null;\n\n    // 🔍 Helper to find the existing chat between user1 and user2\n    async function findChatId(user1, user2) {\n      const chatsRef = collection(db, 'chats');\n      const snapshot = await getDocs(chatsRef);\n      for (const docSnap of snapshot.docs) {\n        const data = docSnap.data();\n        const users = [data.user1, data.user2];\n        if (users.includes(user1) && users.includes(user2)) {\n          return docSnap.id;\n        }\n      }\n      return null;\n    }\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      for (const id of ids) {\n        const messageDoc = await getDoc(doc(db, 'chatMessages', id));\n        if (messageDoc.exists()) {\n          messages.push({\n            id: messageDoc.id,\n            ...messageDoc.data()\n          });\n        }\n      }\n      messageList.value = messages;\n    }\n\n    // 👇 Load chat on component mount\n    onMounted(async () => {\n      chatId = await findChatId(user1, user2);\n      if (!chatId) {\n        console.log(\"No chat found between users.\");\n        return;\n      }\n      const chatRef = doc(db, 'chats', chatId);\n      chatUnsub = onSnapshot(chatRef, chatSnap => {\n        if (chatSnap.exists()) {\n          const chatData = chatSnap.data();\n          const messageIds = chatData.messages || [];\n          loadMessagesByIds(messageIds);\n        } else {\n          console.log('Chat does not exist.');\n          messageList.value = [];\n        }\n      });\n    });\n    async function sendMessage() {\n      if (!newMessage.value.trim()) return;\n      try {\n        const messageData = {\n          sender: currentUser?.uid,\n          receiver: currentUser?.uid === user1 ? user2 : user1,\n          message: newMessage.value,\n          timestamp: serverTimestamp()\n        };\n        const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\n        await updateDoc(doc(db, 'chats', chatId), {\n          messages: arrayUnion(newMsgRef.id)\n        });\n        newMessage.value = \"\";\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      const date = ts.toDate();\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n    });\n    const __returned__ = {\n      route,\n      user1,\n      user2,\n      auth,\n      currentUser,\n      newMessage,\n      messageList,\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      get chatId() {\n        return chatId;\n      },\n      set chatId(v) {\n        chatId = v;\n      },\n      findChatId,\n      loadMessagesByIds,\n      sendMessage,\n      formatTimestamp,\n      ref,\n      onBeforeUnmount,\n      onMounted,\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get db() {\n        return db;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getAuth() {\n        return getAuth;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onBeforeUnmount","onMounted","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","getDocs","db","useRoute","getAuth","route","user1","params","user2","auth","currentUser","newMessage","messageList","chatUnsub","chatId","findChatId","chatsRef","snapshot","docSnap","docs","data","users","includes","id","loadMessagesByIds","ids","messages","messageDoc","exists","push","value","console","log","chatRef","chatSnap","chatData","messageIds","sendMessage","trim","messageData","sender","uid","receiver","message","timestamp","newMsgRef","error","formatTimestamp","ts","date","toDate","toLocaleTimeString","hour","minute"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.message\" :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\">\r\n          {{ msg.message }}\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n      </ul>\r\n      <input type=\"text\" v-model=\"newMessage\">\r\n      <button @click.prevent=\"sendMessage\">\r\n            <i class=\"fas fa-paper-plane\"></i>\r\n    </button>\r\n\r\n    </div>\r\n  </template>\r\n  <script setup>\r\n  import { ref, onBeforeUnmount, onMounted } from 'vue';\r\n  import { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, getDocs } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  import { useRoute } from 'vue-router';\r\n  import { getAuth } from 'firebase/auth';\r\n  \r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  \r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n  \r\n  const newMessage = ref(\"\");\r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  let chatId = null;\r\n  \r\n  // 🔍 Helper to find the existing chat between user1 and user2\r\n  async function findChatId(user1, user2) {\r\n    const chatsRef = collection(db, 'chats');\r\n    const snapshot = await getDocs(chatsRef);\r\n  \r\n    for (const docSnap of snapshot.docs) {\r\n      const data = docSnap.data();\r\n      const users = [data.user1, data.user2];\r\n      if (users.includes(user1) && users.includes(user2)) {\r\n        return docSnap.id;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  // 👇 Load chat on component mount\r\n  onMounted(async () => {\r\n    chatId = await findChatId(user1, user2);\r\n  \r\n    if (!chatId) {\r\n      console.log(\"No chat found between users.\");\r\n      return;\r\n    }\r\n  \r\n    const chatRef = doc(db, 'chats', chatId);\r\n    chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n      if (chatSnap.exists()) {\r\n        const chatData = chatSnap.data();\r\n        const messageIds = chatData.messages || [];\r\n        loadMessagesByIds(messageIds);\r\n      } else {\r\n        console.log('Chat does not exist.');\r\n        messageList.value = [];\r\n      }\r\n    });\r\n  });\r\n  \r\n  async function sendMessage() {\r\n    if (!newMessage.value.trim()) return;\r\n  \r\n    try {\r\n      const messageData = {\r\n        sender: currentUser?.uid,  \r\n        receiver: currentUser?.uid === user1 ? user2 : user1,  \r\n        message: newMessage.value,\r\n        timestamp: serverTimestamp()\r\n      };\r\n  \r\n      const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n  \r\n      await updateDoc(doc(db, 'chats', chatId), {\r\n        messages: arrayUnion(newMsgRef.id)\r\n      });\r\n  \r\n      newMessage.value = \"\";\r\n  \r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    }\r\n  }\r\n  \r\n  function formatTimestamp(ts) {\r\n    if (!ts) return '';\r\n    const date = ts.toDate();\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n  \r\n\r\n  \r\n  <style scoped>\r\n  ul{\r\n    max-width: 40%;\r\n  }\r\n  li{\r\n    list-style: none;\r\n    width: 100px;\r\n  }\r\n  .sent {\r\n    text-align: right;\r\n    align-self: ;\r\n    background-color: #daf8cb;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .received {\r\n    text-align: left;\r\n    background-color: #f1f0f0;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-right: auto;\r\n  }\r\n  button{\r\n    border: none;\r\n    background-color: rgb(72, 111, 72);\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  .timestamp {\r\n  font-size: 0.75rem;\r\n  color: #888;\r\n  display: block;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n</style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}