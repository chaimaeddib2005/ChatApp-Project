{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, onBeforeUnmount, nextTick } from 'vue';\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue } from 'firebase/database';\nimport { useRoute } from 'vue-router';\nimport { getAuth } from 'firebase/auth';\nimport { useRouter } from 'vue-router';\nimport { deleteField } from 'firebase/firestore';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, deleteDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const route = useRoute();\n    const chatId = route.params.chatId;\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n\n    // Refs\n    const newMessage = ref('');\n    const messageList = ref([]);\n    const previewUrl = ref('');\n    const fileInput = ref(null);\n    const otherUserStatus = ref('offline');\n    const isOtherUserTyping = ref(false);\n    const messagesContainer = ref(null);\n    const hoveredMessage = ref(null);\n    const showDeleteModal = ref(false);\n    const messageToDelete = ref(null);\n    let typingTimeout = null;\n    let otherUserId = null;\n    let unsubscribeStatus = null;\n    let unsubscribeTyping = null;\n    let chatUnsub = null;\n    const scrollToBottom = () => {\n      nextTick(() => {\n        if (messagesContainer.value) {\n          messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n        }\n      });\n    };\n    const addReaction = async (messageId, emoji) => {\n      if (!currentUser?.uid) return;\n      try {\n        const messageRef = doc(db, 'chatMessages', messageId);\n        await updateDoc(messageRef, {\n          reaction: emoji\n        });\n      } catch (error) {\n        console.error('Error adding reaction:', error);\n      }\n    };\n    const removeReaction = async messageId => {\n      try {\n        const messageRef = doc(db, 'chatMessages', messageId);\n        await updateDoc(messageRef, {\n          reaction: deleteField()\n        });\n      } catch (error) {\n        console.error('Error removing reaction:', error);\n      }\n    };\n    const deleteMessage = messageId => {\n      messageToDelete.value = messageId;\n      showDeleteModal.value = true;\n    };\n    const confirmDelete = async () => {\n      if (!messageToDelete.value) return;\n      try {\n        const chatRef = doc(db, 'chats', chatId);\n        const chatDoc = await getDoc(chatRef);\n        if (chatDoc.exists()) {\n          const currentMessages = chatDoc.data().messages || [];\n          const updatedMessages = currentMessages.filter(id => id !== messageToDelete.value);\n          await updateDoc(chatRef, {\n            messages: updatedMessages\n          });\n          await deleteDoc(doc(db, 'chatMessages', messageToDelete.value));\n          messageList.value = messageList.value.filter(msg => msg.id !== messageToDelete.value);\n        }\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      } finally {\n        cancelDelete();\n      }\n    };\n    const cancelDelete = () => {\n      showDeleteModal.value = false;\n      messageToDelete.value = null;\n    };\n    const goBackToChatList = () => {\n      router.push('/chatList');\n    };\n    const setupPresence = async () => {\n      const rtdb = getDatabase();\n      const user = currentUser;\n      if (!user) return;\n      try {\n        const chatDoc = await getDoc(doc(db, 'chats', chatId));\n        if (!chatDoc.exists()) return;\n        const chatData = chatDoc.data();\n        otherUserId = chatData.user1 === user.uid ? chatData.user2 : chatData.user1;\n\n        // Current user's status\n        const userStatusRef = dbRef(rtdb, `status/${user.uid}`);\n        const userStatusConnectedRef = dbRef(rtdb, '.info/connected');\n\n        // Other user's references\n        const otherUserStatusRef = dbRef(rtdb, `status/${otherUserId}`);\n        const otherUserTypingRef = dbRef(rtdb, `status/${otherUserId}/typing`);\n\n        // Connection state\n        onValue(userStatusConnectedRef, snap => {\n          if (snap.val() === true) {\n            set(userStatusRef, {\n              state: 'online',\n              last_changed: serverTimestamp()\n            }).catch(e => console.error(\"Error setting status:\", e));\n            onDisconnect(userStatusRef).set({\n              state: 'offline',\n              last_changed: serverTimestamp()\n            });\n          }\n        });\n\n        // Other user's status\n        unsubscribeStatus = onValue(otherUserStatusRef, snapshot => {\n          const status = snapshot.val();\n          otherUserStatus.value = status?.state || 'offline';\n        }, error => {\n          console.error(\"Status listener error:\", error);\n        });\n\n        // Typing status\n        unsubscribeTyping = onValue(otherUserTypingRef, snapshot => {\n          isOtherUserTyping.value = snapshot.val() || false;\n        }, error => {\n          console.error(\"Typing listener error:\", error);\n        });\n      } catch (error) {\n        console.error(\"Error setting up presence:\", error);\n      }\n    };\n    const handleTyping = () => {\n      if (!currentUser || !otherUserId) return;\n      const rtdb = getDatabase();\n      const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\n      set(typingRef, true).catch(e => console.error(\"Error setting typing:\", e));\n      if (typingTimeout) clearTimeout(typingTimeout);\n      typingTimeout = setTimeout(() => {\n        set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\n      }, 3000);\n    };\n    const cancelImage = () => {\n      previewUrl.value = '';\n      // Clear the file input as well\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n    function isImageMessage(message) {\n      return typeof message === 'string' && (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\n    }\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      let date;\n      if (ts?.toDate) {\n        date = ts.toDate();\n      } else if (ts?.seconds) {\n        date = new Date(ts.seconds * 1000);\n      } else if (ts instanceof Date) {\n        date = ts;\n      } else {\n        console.warn(\"Unknown timestamp format:\", ts);\n        return '';\n      }\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      try {\n        if (!chatId) {\n          console.error(\"No chatId provided\");\n          return messages;\n        }\n        const chatDoc = await getDoc(doc(db, 'chats', chatId));\n        if (!chatDoc.exists()) {\n          console.error(\"Chat doesn't exist\");\n          return messages;\n        }\n\n        // Use Promise.all for parallel loading\n        const messagePromises = ids.filter(id => id && typeof id === 'string').map(async id => {\n          try {\n            const messageDoc = await getDoc(doc(db, 'chatMessages', id));\n            if (messageDoc.exists()) {\n              const messageData = messageDoc.data();\n              return {\n                id: messageDoc.id,\n                ...messageData,\n                timestamp: messageData.timestamp?.toDate?.() || new Date()\n              };\n            }\n          } catch (error) {\n            console.error(`Error loading message ${id}:`, error);\n          }\n          return null;\n        });\n        const loadedMessages = await Promise.all(messagePromises);\n        messages.push(...loadedMessages.filter(Boolean));\n        messages.sort((a, b) => a.timestamp - b.timestamp);\n        return messages;\n      } catch (error) {\n        console.error(\"Error loading messages:\", error);\n        return messages;\n      }\n    }\n    const loadMessagesRealtime = () => {\n      if (!chatId) return;\n      const chatRef = doc(db, 'chats', chatId);\n\n      // First load all messages in correct order\n      getDoc(chatRef).then(chatDoc => {\n        if (!chatDoc.exists()) return;\n        const messageIds = chatDoc.data().messages || [];\n\n        // Load initial messages in correct order\n        loadMessagesByIds(messageIds).then(() => {\n          // Then set up realtime listeners for updates\n          if (chatUnsub) chatUnsub(); // Clean previous listener\n\n          // Create a map of message IDs to their index for quick lookup\n          const messageIndexMap = {};\n          messageList.value.forEach((msg, index) => {\n            messageIndexMap[msg.id] = index;\n          });\n          chatUnsub = onSnapshot(collection(db, 'chatMessages'), snapshot => {\n            snapshot.docChanges().forEach(change => {\n              const messageId = change.doc.id;\n              const messageData = change.doc.data();\n              const index = messageIndexMap[messageId];\n              if (index !== undefined) {\n                // Update existing message while maintaining position\n                messageList.value[index] = {\n                  ...messageList.value[index],\n                  ...messageData,\n                  timestamp: messageData.timestamp?.toDate?.() || messageList.value[index].timestamp\n                };\n              }\n            });\n\n            // Trigger Vue reactivity\n            messageList.value = [...messageList.value];\n          }, error => {\n            console.error(\"Error listening to messages:\", error);\n          });\n        });\n      });\n    };\n    async function sendCombinedMessage() {\n      const text = newMessage.value.trim();\n      const image = previewUrl.value;\n      if (!text && !image) return;\n      try {\n        const messageData = {\n          sender: currentUser?.uid,\n          message: image || text,\n          timestamp: serverTimestamp(),\n          chatId: chatId,\n          reaction: null\n        };\n        const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\n        await updateDoc(doc(db, 'chats', chatId), {\n          messages: arrayUnion(newMsgRef.id),\n          lastUpdated: serverTimestamp()\n        });\n        newMessage.value = '';\n        previewUrl.value = '';\n        if (currentUser) {\n          const rtdb = getDatabase();\n          const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\n          set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n      scrollToBottom();\n    }\n    const onDrop = e => {\n      const file = e.dataTransfer.files[0];\n      if (file) convertToBase64(file);\n    };\n    const onFileChange = e => {\n      const file = e.target.files[0];\n      if (file) convertToBase64(file);\n    };\n    const convertToBase64 = file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        previewUrl.value = reader.result;\n      };\n      reader.readAsDataURL(file);\n    };\n    onMounted(async () => {\n      try {\n        // 1. First set up presence (unchanged)\n        await setupPresence();\n\n        // 2. Set up chat listener (modified to maintain order)\n        const chatRef = doc(db, 'chats', chatId);\n        chatUnsub = onSnapshot(chatRef, async chatSnap => {\n          if (chatSnap.exists()) {\n            const chatData = chatSnap.data();\n            const messageIds = chatData.messages || [];\n\n            // Load initial messages in correct order\n            await loadMessagesByIds(messageIds);\n\n            // Set up individual message listeners for realtime updates\n            const messageListeners = {};\n            messageIds.forEach(id => {\n              if (!messageListeners[id]) {\n                messageListeners[id] = onSnapshot(doc(db, 'chatMessages', id), docSnap => {\n                  if (docSnap.exists()) {\n                    const updatedData = docSnap.data();\n                    const index = messageList.value.findIndex(msg => msg.id === id);\n                    if (index !== -1) {\n                      // Update the message in place to maintain order\n                      messageList.value[index] = {\n                        ...messageList.value[index],\n                        ...updatedData,\n                        timestamp: updatedData.timestamp?.toDate?.() || messageList.value[index].timestamp\n                      };\n                      // Trigger Vue reactivity\n                      messageList.value = [...messageList.value];\n                    }\n                  }\n                });\n              }\n            });\n\n            // Clean up old listeners\n            onBeforeUnmount(() => {\n              Object.values(messageListeners).forEach(unsub => unsub());\n            });\n          } else {\n            console.warn('Chat document does not exist');\n            messageList.value = [];\n          }\n        }, error => {\n          console.error(\"Chat listener error:\", error);\n        });\n        scrollToBottom();\n      } catch (error) {\n        console.error(\"Error initializing chat:\", error);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n      if (unsubscribeStatus && typeof unsubscribeStatus === 'function') {\n        try {\n          unsubscribeStatus();\n        } catch (e) {\n          console.warn(\"Error unsubscribing status:\", e);\n        }\n      }\n      if (unsubscribeTyping && typeof unsubscribeTyping === 'function') {\n        try {\n          unsubscribeTyping();\n        } catch (e) {\n          console.warn(\"Error unsubscribing typing:\", e);\n        }\n      }\n      if (typingTimeout) clearTimeout(typingTimeout);\n      if (currentUser) {\n        const rtdb = getDatabase();\n        const userStatusRef = dbRef(rtdb, `status/${currentUser.uid}`);\n        set(userStatusRef, {\n          state: 'offline',\n          last_changed: serverTimestamp()\n        }).catch(e => console.warn(\"Error setting offline status:\", e));\n      }\n    });\n    const __returned__ = {\n      router,\n      route,\n      chatId,\n      auth,\n      currentUser,\n      newMessage,\n      messageList,\n      previewUrl,\n      fileInput,\n      otherUserStatus,\n      isOtherUserTyping,\n      messagesContainer,\n      hoveredMessage,\n      showDeleteModal,\n      messageToDelete,\n      get typingTimeout() {\n        return typingTimeout;\n      },\n      set typingTimeout(v) {\n        typingTimeout = v;\n      },\n      get otherUserId() {\n        return otherUserId;\n      },\n      set otherUserId(v) {\n        otherUserId = v;\n      },\n      get unsubscribeStatus() {\n        return unsubscribeStatus;\n      },\n      set unsubscribeStatus(v) {\n        unsubscribeStatus = v;\n      },\n      get unsubscribeTyping() {\n        return unsubscribeTyping;\n      },\n      set unsubscribeTyping(v) {\n        unsubscribeTyping = v;\n      },\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      scrollToBottom,\n      addReaction,\n      removeReaction,\n      deleteMessage,\n      confirmDelete,\n      cancelDelete,\n      goBackToChatList,\n      setupPresence,\n      handleTyping,\n      cancelImage,\n      isImageMessage,\n      formatTimestamp,\n      loadMessagesByIds,\n      loadMessagesRealtime,\n      sendCombinedMessage,\n      onDrop,\n      onFileChange,\n      convertToBase64,\n      ref,\n      onMounted,\n      onBeforeUnmount,\n      nextTick,\n      get getDatabase() {\n        return getDatabase;\n      },\n      get dbRef() {\n        return dbRef;\n      },\n      get set() {\n        return set;\n      },\n      get onDisconnect() {\n        return onDisconnect;\n      },\n      get onValue() {\n        return onValue;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getAuth() {\n        return getAuth;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get deleteField() {\n        return deleteField;\n      },\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get deleteDoc() {\n        return deleteDoc;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","nextTick","getDatabase","dbRef","set","onDisconnect","onValue","useRoute","getAuth","useRouter","deleteField","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","deleteDoc","db","router","route","chatId","params","auth","currentUser","newMessage","messageList","previewUrl","fileInput","otherUserStatus","isOtherUserTyping","messagesContainer","hoveredMessage","showDeleteModal","messageToDelete","typingTimeout","otherUserId","unsubscribeStatus","unsubscribeTyping","chatUnsub","scrollToBottom","value","scrollTop","scrollHeight","addReaction","messageId","emoji","uid","messageRef","reaction","error","console","removeReaction","deleteMessage","confirmDelete","chatRef","chatDoc","exists","currentMessages","data","messages","updatedMessages","filter","id","msg","cancelDelete","goBackToChatList","push","setupPresence","rtdb","user","chatData","user1","user2","userStatusRef","userStatusConnectedRef","otherUserStatusRef","otherUserTypingRef","snap","val","state","last_changed","catch","e","snapshot","status","handleTyping","typingRef","clearTimeout","setTimeout","cancelImage","isImageMessage","message","startsWith","test","formatTimestamp","ts","date","toDate","seconds","Date","warn","toLocaleTimeString","hour","minute","loadMessagesByIds","ids","messagePromises","map","messageDoc","messageData","timestamp","loadedMessages","Promise","all","Boolean","sort","a","b","loadMessagesRealtime","then","messageIds","messageIndexMap","forEach","index","docChanges","change","undefined","sendCombinedMessage","text","trim","image","sender","newMsgRef","lastUpdated","onDrop","file","dataTransfer","files","convertToBase64","onFileChange","target","reader","FileReader","onload","result","readAsDataURL","chatSnap","messageListeners","docSnap","updatedData","findIndex","Object","values","unsub"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <button @click=\"goBackToChatList\" id=\"gobackbut\">Back to Chat List</button>\r\n    <small v-if=\"otherUserId\" class=\"status-indicator\">\r\n      {{ otherUserStatus || 'offline' }}\r\n      <span v-if=\"isOtherUserTyping\"> (typing...)</span>\r\n    </small>\r\n    <div v-if=\"showDeleteModal\" class=\"modal-overlay\">\r\n      <div class=\"modal\">\r\n        <h3>Delete Message</h3>\r\n        <p>Are you sure you want to delete this message?</p>\r\n        <div class=\"modal-actions\">\r\n          <button @click=\"confirmDelete\" class=\"confirm-btn\">Delete</button>\r\n          <button @click=\"cancelDelete\" class=\"cancel-btn\">Cancel</button>\r\n        </div>\r\n    </div>\r\n  </div>\r\n    <ul ref=\"messagesContainer\">\r\n      <li\r\n        v-for=\"msg in messageList\"\r\n        :key=\"msg.id\"\r\n        :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n        @mouseover=\"hoveredMessage = msg.id\"\r\n        @mouseleave=\"hoveredMessage = null\"\r\n      >\r\n      <div class=\"message-content\">\r\n        <div v-if=\"isImageMessage(msg.message)\">\r\n          <img :src=\"msg.message\" alt=\"Image\" class=\"chat-image\" />\r\n        </div>\r\n        <div v-else>\r\n          {{ msg.message }}\r\n        </div>\r\n        <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        <span \r\n          v-if=\"msg.reaction\" \r\n          class=\"message-reaction\"\r\n          @click=\"removeReaction(msg.id)\"\r\n        >\r\n          {{ msg.reaction }}\r\n        </span>\r\n\r\n      </div>\r\n        \r\n        \r\n        <div class=\"reaction-options\" v-if=\"hoveredMessage === msg.id && !msg.reaction\">\r\n          <button \r\n            v-for=\"emoji in ['👍', '❤️', '😂', '😮', '😢']\" \r\n            :key=\"emoji\"\r\n            @click.stop=\"addReaction(msg.id, emoji)\"\r\n            class=\"emoji-btn\"\r\n          >\r\n            {{ emoji }}\r\n          </button>\r\n        </div>\r\n        <button \r\n          v-if=\"msg.sender === currentUser?.uid && hoveredMessage === msg.id\"\r\n          @click.stop=\"deleteMessage(msg.id)\"\r\n          class=\"delete-button\"\r\n        >\r\n          <i class=\"fas fa-trash\"></i>\r\n    </button>\r\n      </li>\r\n    </ul>\r\n    <div class=\"input-area\">\r\n      <input \r\n        type=\"text\" \r\n        v-model=\"newMessage\"\r\n        @input=\"handleTyping\"\r\n        @keyup.enter=\"sendCombinedMessage\"\r\n      >\r\n      <button @click.prevent=\"sendCombinedMessage\">\r\n        <i class=\"fas fa-paper-plane\"></i>\r\n      </button>\r\n      <div @drop.prevent=\"onDrop\" @dragover.prevent>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileInput\"\r\n          accept=\"image/*\"\r\n          @change=\"onFileChange\"\r\n          style=\"display: none\"\r\n        />\r\n        <div v-if=\"previewUrl\" class=\"image-preview\">\r\n          <img :src=\"previewUrl\" alt=\"Preview\" class=\"chat-image\" />\r\n          <button @click=\"cancelImage\" class=\"cancel-button\">\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n        </div>\r\n        <button @click=\"$refs.fileInput.click()\" class=\"icon-button\">\r\n          <i class=\"fas fa-image\"></i>\r\n        </button>\r\n      </div>\r\n    </div> \r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount, nextTick } from 'vue';\r\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue} from 'firebase/database';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { useRouter } from 'vue-router';\r\nimport { deleteField } from 'firebase/firestore';\r\nimport {\r\n  doc,\r\n  getDoc,\r\n  onSnapshot,\r\n  addDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n  collection,\r\n  serverTimestamp,\r\n  deleteDoc\r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst chatId = route.params.chatId;\r\nconst auth = getAuth();\r\nconst currentUser = auth.currentUser;\r\n\r\n// Refs\r\nconst newMessage = ref('');\r\nconst messageList = ref([]);\r\nconst previewUrl = ref('');\r\nconst fileInput = ref(null);\r\nconst otherUserStatus = ref('offline');\r\nconst isOtherUserTyping = ref(false);\r\nconst messagesContainer = ref(null);\r\nconst hoveredMessage = ref(null);\r\nconst showDeleteModal = ref(false);\r\nconst messageToDelete = ref(null);\r\nlet typingTimeout = null;\r\nlet otherUserId = null;\r\nlet unsubscribeStatus = null;\r\nlet unsubscribeTyping = null;\r\nlet chatUnsub = null;\r\n\r\n\r\nconst scrollToBottom = () => {\r\n  nextTick(() => {\r\n    if (messagesContainer.value) {\r\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\r\n    }\r\n  });\r\n};\r\n\r\nconst addReaction = async (messageId, emoji) => {\r\n  if (!currentUser?.uid) return;\r\n  \r\n  try {\r\n    const messageRef = doc(db, 'chatMessages', messageId);\r\n    await updateDoc(messageRef, {\r\n      reaction: emoji\r\n    });\r\n  } catch (error) {\r\n    console.error('Error adding reaction:', error);\r\n  }\r\n};\r\n\r\nconst removeReaction = async (messageId) => {\r\n  try {\r\n    const messageRef = doc(db, 'chatMessages', messageId);\r\n    await updateDoc(messageRef, {\r\n      reaction: deleteField()\r\n    });\r\n  } catch (error) {\r\n    console.error('Error removing reaction:', error);\r\n  }\r\n};\r\n\r\n\r\nconst deleteMessage = (messageId) => {\r\n  messageToDelete.value = messageId;\r\n  showDeleteModal.value = true;\r\n};\r\n\r\nconst confirmDelete = async () => {\r\n  if (!messageToDelete.value) return;\r\n  \r\n  try {\r\n    const chatRef = doc(db, 'chats', chatId);\r\n    const chatDoc = await getDoc(chatRef);\r\n    \r\n    if (chatDoc.exists()) {\r\n      const currentMessages = chatDoc.data().messages || [];\r\n      const updatedMessages = currentMessages.filter(id => id !== messageToDelete.value);\r\n      \r\n      await updateDoc(chatRef, {\r\n        messages: updatedMessages\r\n      });\r\n      \r\n      await deleteDoc(doc(db, 'chatMessages', messageToDelete.value));\r\n      \r\n      messageList.value = messageList.value.filter(msg => msg.id !== messageToDelete.value);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting message:', error);\r\n  } finally {\r\n    cancelDelete();\r\n  }\r\n};\r\n\r\nconst cancelDelete = () => {\r\n  showDeleteModal.value = false;\r\n  messageToDelete.value = null;\r\n};\r\n\r\nconst goBackToChatList = () => {\r\n  router.push('/chatList');\r\n};\r\n\r\nconst setupPresence = async () => {\r\n  const rtdb = getDatabase();\r\n  const user = currentUser;\r\n  if (!user) return;\r\n\r\n  try {\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) return;\r\n\r\n    const chatData = chatDoc.data();\r\n    otherUserId = chatData.user1 === user.uid ? chatData.user2 : chatData.user1;\r\n\r\n    // Current user's status\r\n    const userStatusRef = dbRef(rtdb, `status/${user.uid}`);\r\n    const userStatusConnectedRef = dbRef(rtdb, '.info/connected');\r\n    \r\n    // Other user's references\r\n    const otherUserStatusRef = dbRef(rtdb, `status/${otherUserId}`);\r\n    const otherUserTypingRef = dbRef(rtdb, `status/${otherUserId}/typing`);\r\n\r\n    // Connection state\r\n    onValue(userStatusConnectedRef, (snap) => {\r\n      if (snap.val() === true) {\r\n        set(userStatusRef, {\r\n          state: 'online',\r\n          last_changed: serverTimestamp(),\r\n        }).catch(e => console.error(\"Error setting status:\", e));\r\n\r\n        onDisconnect(userStatusRef).set({\r\n          state: 'offline',\r\n          last_changed: serverTimestamp(),\r\n        });\r\n      }\r\n    });\r\n\r\n    // Other user's status\r\n    unsubscribeStatus = onValue(otherUserStatusRef, (snapshot) => {\r\n      const status = snapshot.val();\r\n      otherUserStatus.value = status?.state || 'offline';\r\n    }, (error) => {\r\n      console.error(\"Status listener error:\", error);\r\n    });\r\n\r\n    // Typing status\r\n    unsubscribeTyping = onValue(otherUserTypingRef, (snapshot) => {\r\n      isOtherUserTyping.value = snapshot.val() || false;\r\n    }, (error) => {\r\n      console.error(\"Typing listener error:\", error);\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error setting up presence:\", error);\r\n  }\r\n};\r\n\r\nconst handleTyping = () => {\r\n  if (!currentUser || !otherUserId) return;\r\n  \r\n  const rtdb = getDatabase();\r\n  const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n  \r\n  set(typingRef, true).catch(e => console.error(\"Error setting typing:\", e));\r\n  \r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  typingTimeout = setTimeout(() => {\r\n    set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\r\n  }, 3000);\r\n};\r\n\r\nconst cancelImage = () => {\r\n  previewUrl.value = '';\r\n  // Clear the file input as well\r\n  if (fileInput.value) {\r\n    fileInput.value.value = '';\r\n  }\r\n};\r\n\r\nfunction isImageMessage(message) {\r\n  return typeof message === 'string' &&\r\n    (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\r\n}\r\n\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n\r\n  let date;\r\n  \r\n  if (ts?.toDate) {\r\n    date = ts.toDate();\r\n  } else if (ts?.seconds) {\r\n    date = new Date(ts.seconds * 1000);\r\n  } else if (ts instanceof Date) {\r\n    date = ts;\r\n  } else {\r\n    console.warn(\"Unknown timestamp format:\", ts);\r\n    return '';\r\n  }\r\n\r\n  return date.toLocaleTimeString([], { \r\n    hour: '2-digit', \r\n    minute: '2-digit' \r\n  });\r\n}\r\nasync function loadMessagesByIds(ids) {\r\n  const messages = [];\r\n  try {\r\n    if (!chatId) {\r\n      console.error(\"No chatId provided\");\r\n      return messages;\r\n    }\r\n\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) {\r\n      console.error(\"Chat doesn't exist\");\r\n      return messages;\r\n    }\r\n\r\n    // Use Promise.all for parallel loading\r\n    const messagePromises = ids\r\n      .filter(id => id && typeof id === 'string')\r\n      .map(async id => {\r\n        try {\r\n          const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n          if (messageDoc.exists()) {\r\n            const messageData = messageDoc.data();\r\n            return {\r\n              id: messageDoc.id,\r\n              ...messageData,\r\n              timestamp: messageData.timestamp?.toDate?.() || new Date()\r\n            };\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error loading message ${id}:`, error);\r\n        }\r\n        return null;\r\n      });\r\n\r\n    const loadedMessages = await Promise.all(messagePromises);\r\n    messages.push(...loadedMessages.filter(Boolean));\r\n    messages.sort((a, b) => a.timestamp - b.timestamp);\r\n    return messages;\r\n  } catch (error) {\r\n    console.error(\"Error loading messages:\", error);\r\n    return messages;\r\n  }\r\n}\r\nconst loadMessagesRealtime = () => {\r\n  if (!chatId) return;\r\n\r\n  const chatRef = doc(db, 'chats', chatId);\r\n  \r\n  // First load all messages in correct order\r\n  getDoc(chatRef).then((chatDoc) => {\r\n    if (!chatDoc.exists()) return;\r\n\r\n    const messageIds = chatDoc.data().messages || [];\r\n    \r\n    // Load initial messages in correct order\r\n    loadMessagesByIds(messageIds).then(() => {\r\n      // Then set up realtime listeners for updates\r\n      if (chatUnsub) chatUnsub(); // Clean previous listener\r\n      \r\n      // Create a map of message IDs to their index for quick lookup\r\n      const messageIndexMap = {};\r\n      messageList.value.forEach((msg, index) => {\r\n        messageIndexMap[msg.id] = index;\r\n      });\r\n\r\n      chatUnsub = onSnapshot(\r\n        collection(db, 'chatMessages'),\r\n        (snapshot) => {\r\n          snapshot.docChanges().forEach((change) => {\r\n            const messageId = change.doc.id;\r\n            const messageData = change.doc.data();\r\n            const index = messageIndexMap[messageId];\r\n            \r\n            if (index !== undefined) {\r\n              // Update existing message while maintaining position\r\n              messageList.value[index] = { \r\n                ...messageList.value[index],\r\n                ...messageData,\r\n                timestamp: messageData.timestamp?.toDate?.() || messageList.value[index].timestamp\r\n              };\r\n            }\r\n          });\r\n          \r\n          // Trigger Vue reactivity\r\n          messageList.value = [...messageList.value];\r\n        },\r\n        (error) => {\r\n          console.error(\"Error listening to messages:\", error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n\r\nasync function sendCombinedMessage() {\r\n  const text = newMessage.value.trim();\r\n  const image = previewUrl.value;\r\n\r\n  if (!text && !image) return;\r\n\r\n  try {\r\n    const messageData = {\r\n      sender: currentUser?.uid,\r\n      message: image || text,\r\n      timestamp: serverTimestamp(),\r\n      chatId: chatId,\r\n      reaction: null\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id),\r\n      lastUpdated: serverTimestamp()\r\n    });\r\n\r\n    newMessage.value = '';\r\n    previewUrl.value = '';\r\n    \r\n    if (currentUser) {\r\n      const rtdb = getDatabase();\r\n      const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n      set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n  }\r\n  scrollToBottom();\r\n}\r\n\r\nconst onDrop = (e) => {\r\n  const file = e.dataTransfer.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\nconst onFileChange = (e) => {\r\n  const file = e.target.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\nconst convertToBase64 = (file) => {\r\n  const reader = new FileReader();\r\n  reader.onload = () => {\r\n    previewUrl.value = reader.result;\r\n  };\r\n  reader.readAsDataURL(file);\r\n};\r\n\r\nonMounted(async () => {\r\n  try {\r\n    // 1. First set up presence (unchanged)\r\n    await setupPresence();\r\n    \r\n    // 2. Set up chat listener (modified to maintain order)\r\n    const chatRef = doc(db, 'chats', chatId);\r\n    chatUnsub = onSnapshot(chatRef, async (chatSnap) => {\r\n      if (chatSnap.exists()) {\r\n        const chatData = chatSnap.data();\r\n        const messageIds = chatData.messages || [];\r\n        \r\n        // Load initial messages in correct order\r\n        await loadMessagesByIds(messageIds);\r\n        \r\n        // Set up individual message listeners for realtime updates\r\n        const messageListeners = {};\r\n        messageIds.forEach(id => {\r\n          if (!messageListeners[id]) {\r\n            messageListeners[id] = onSnapshot(doc(db, 'chatMessages', id), (docSnap) => {\r\n              if (docSnap.exists()) {\r\n                const updatedData = docSnap.data();\r\n                const index = messageList.value.findIndex(msg => msg.id === id);\r\n                \r\n                if (index !== -1) {\r\n                  // Update the message in place to maintain order\r\n                  messageList.value[index] = {\r\n                    ...messageList.value[index],\r\n                    ...updatedData,\r\n                    timestamp: updatedData.timestamp?.toDate?.() || messageList.value[index].timestamp\r\n                  };\r\n                  // Trigger Vue reactivity\r\n                  messageList.value = [...messageList.value];\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n        \r\n        // Clean up old listeners\r\n        onBeforeUnmount(() => {\r\n          Object.values(messageListeners).forEach(unsub => unsub());\r\n        });\r\n      } else {\r\n        console.warn('Chat document does not exist');\r\n        messageList.value = [];\r\n      }\r\n    }, (error) => {\r\n      console.error(\"Chat listener error:\", error);\r\n    });\r\n    \r\n    scrollToBottom();\r\n  } catch (error) {\r\n    console.error(\"Error initializing chat:\", error);\r\n  }\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (chatUnsub) chatUnsub();\r\n  \r\n  if (unsubscribeStatus && typeof unsubscribeStatus === 'function') {\r\n    try {\r\n      unsubscribeStatus();\r\n    } catch (e) {\r\n      console.warn(\"Error unsubscribing status:\", e);\r\n    }\r\n  }\r\n  \r\n  if (unsubscribeTyping && typeof unsubscribeTyping === 'function') {\r\n    try {\r\n      unsubscribeTyping();\r\n    } catch (e) {\r\n      console.warn(\"Error unsubscribing typing:\", e);\r\n    }\r\n  }\r\n  \r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  if (currentUser) {\r\n    const rtdb = getDatabase();\r\n    const userStatusRef = dbRef(rtdb, `status/${currentUser.uid}`);\r\n    set(userStatusRef, {\r\n      state: 'offline',\r\n      last_changed: serverTimestamp(),\r\n    }).catch(e => console.warn(\"Error setting offline status:\", e));\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 40px auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #ffffff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n#gobackbut{\r\n  width: 150px;\r\n  height: 35px;\r\n  border-radius: 10px;\r\n}\r\n\r\nul {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 10px;\r\n  margin-bottom: 20px;\r\n  max-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n  max-width: 75%;\r\n  padding: 10px 14px;\r\n  padding-bottom: 20px;\r\n  border-radius: 20px;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n  line-height: 1.5;\r\n  font-size: 0.95rem;\r\n  transition: background-color 0.2s;\r\n}\r\n.message-reaction {\r\n  position: absolute;\r\n  bottom: -1.2rem;\r\n  right: 0.5rem;\r\n  background: #fff;\r\n  border-radius: 1rem;\r\n  font-size: 1rem;\r\n  padding: 0.2rem 0.5rem;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 2px rgba(0,0,0,0.2);\r\n}\r\n\r\n.reaction-options {\r\n  display: flex;\r\n  gap: 0.3rem;\r\n  margin-top: 0.3rem;\r\n}\r\n\r\n.emoji-btn {\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.emoji-btn:hover {\r\n  transform: scale(1.2);\r\n}\r\n.delete-button {\r\n  position: absolute;\r\n  top: -8px;\r\n  right: -8px;\r\n  background-color: #ff4444;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  opacity: 0.8;\r\n  transition: opacity 0.2s;\r\n}\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n.modal {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  max-width: 400px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.modal h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n}\r\n\r\n.modal p {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.modal-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n}\r\n.confirm-btn {\r\n  background-color: #ff4444;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 50px;\r\n}\r\n\r\n.confirm-btn:hover {\r\n  background-color: #cc0000;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 50px;\r\n}\r\n\r\n.cancel-btn:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n.delete-button:hover {\r\n  background-color: #ff4444;\r\n  opacity: 1;\r\n}\r\n\r\n.delete-button i {\r\n  font-size: 12px;\r\n}\r\n.sent {\r\n  align-self: flex-end;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.received {\r\n  align-self: flex-start;\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.chat-image {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.7rem;\r\n  margin-top: 4px;\r\n  opacity: 0.7;\r\n  text-align: right;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: auto;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  padding: 10px 14px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\ninput[type=\"text\"]:focus {\r\n  border-color: #4caf50;\r\n}\r\n\r\nbutton {\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 42px;\r\n  height: 42px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #43a047;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n.icon-button {\r\n  background-color: #2196f3;\r\n  margin-left: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  background-color: #1e88e5;\r\n}\r\n\r\n.image-preview {\r\n  position: relative;\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.cancel-button {\r\n  position: absolute;\r\n  top: -10px;\r\n  right: -10px;\r\n  background-color: #ff4444;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\n\r\n.cancel-button:hover {\r\n  background-color: #cc0000;\r\n}\r\n\r\n.cancel-button i {\r\n  font-size: 12px;\r\n}\r\n\r\n\r\n.image-preview img {\r\n  max-width: 120px;\r\n  border-radius: 12px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.status-indicator {\r\n  display: block;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  color: #666;\r\n}\r\n</style>"],"mappings":";;;;;AAgGA,SAASA,GAAG,EAAEC,SAAS,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,KAAK;AAC/D,SAASC,WAAW,EAAEJ,GAAG,IAAIK,KAAK,EAAEC,GAAG,EAAEC,YAAY,EAAEC,OAAO,QAAO,mBAAmB;AACxF,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SACEC,GAAG,EACHC,MAAM,EACNC,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,eAAe,EACfC,SAAS,QACJ,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,aAAa;;;;;;;IAEhC,MAAMC,MAAM,GAAGZ,SAAS,CAAC,CAAC;IAC1B,MAAMa,KAAK,GAAGf,QAAQ,CAAC,CAAC;IACxB,MAAMgB,MAAM,GAAGD,KAAK,CAACE,MAAM,CAACD,MAAM;IAClC,MAAME,IAAI,GAAGjB,OAAO,CAAC,CAAC;IACtB,MAAMkB,WAAW,GAAGD,IAAI,CAACC,WAAW;;IAEpC;IACA,MAAMC,UAAU,GAAG7B,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAM8B,WAAW,GAAG9B,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAM+B,UAAU,GAAG/B,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMgC,SAAS,GAAGhC,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMiC,eAAe,GAAGjC,GAAG,CAAC,SAAS,CAAC;IACtC,MAAMkC,iBAAiB,GAAGlC,GAAG,CAAC,KAAK,CAAC;IACpC,MAAMmC,iBAAiB,GAAGnC,GAAG,CAAC,IAAI,CAAC;IACnC,MAAMoC,cAAc,GAAGpC,GAAG,CAAC,IAAI,CAAC;IAChC,MAAMqC,eAAe,GAAGrC,GAAG,CAAC,KAAK,CAAC;IAClC,MAAMsC,eAAe,GAAGtC,GAAG,CAAC,IAAI,CAAC;IACjC,IAAIuC,aAAa,GAAG,IAAI;IACxB,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,iBAAiB,GAAG,IAAI;IAC5B,IAAIC,iBAAiB,GAAG,IAAI;IAC5B,IAAIC,SAAS,GAAG,IAAI;IAGpB,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3BzC,QAAQ,CAAC,MAAM;QACb,IAAIgC,iBAAiB,CAACU,KAAK,EAAE;UAC3BV,iBAAiB,CAACU,KAAK,CAACC,SAAS,GAAGX,iBAAiB,CAACU,KAAK,CAACE,YAAY;QAC1E;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,WAAW,GAAG,MAAAA,CAAOC,SAAS,EAAEC,KAAK,KAAK;MAC9C,IAAI,CAACtB,WAAW,EAAEuB,GAAG,EAAE;MAEvB,IAAI;QACF,MAAMC,UAAU,GAAGvC,GAAG,CAACS,EAAE,EAAE,cAAc,EAAE2B,SAAS,CAAC;QACrD,MAAMhC,SAAS,CAACmC,UAAU,EAAE;UAC1BC,QAAQ,EAAEH;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAED,MAAME,cAAc,GAAG,MAAOP,SAAS,IAAK;MAC1C,IAAI;QACF,MAAMG,UAAU,GAAGvC,GAAG,CAACS,EAAE,EAAE,cAAc,EAAE2B,SAAS,CAAC;QACrD,MAAMhC,SAAS,CAACmC,UAAU,EAAE;UAC1BC,QAAQ,EAAEzC,WAAW,CAAC;QACxB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAO0C,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAGD,MAAMG,aAAa,GAAIR,SAAS,IAAK;MACnCX,eAAe,CAACO,KAAK,GAAGI,SAAS;MACjCZ,eAAe,CAACQ,KAAK,GAAG,IAAI;IAC9B,CAAC;IAED,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI,CAACpB,eAAe,CAACO,KAAK,EAAE;MAE5B,IAAI;QACF,MAAMc,OAAO,GAAG9C,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEG,MAAM,CAAC;QACxC,MAAMmC,OAAO,GAAG,MAAM9C,MAAM,CAAC6C,OAAO,CAAC;QAErC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;UACpB,MAAMC,eAAe,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,QAAQ,IAAI,EAAE;UACrD,MAAMC,eAAe,GAAGH,eAAe,CAACI,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAK7B,eAAe,CAACO,KAAK,CAAC;UAElF,MAAM5B,SAAS,CAAC0C,OAAO,EAAE;YACvBK,QAAQ,EAAEC;UACZ,CAAC,CAAC;UAEF,MAAM5C,SAAS,CAACR,GAAG,CAACS,EAAE,EAAE,cAAc,EAAEgB,eAAe,CAACO,KAAK,CAAC,CAAC;UAE/Df,WAAW,CAACe,KAAK,GAAGf,WAAW,CAACe,KAAK,CAACqB,MAAM,CAACE,GAAG,IAAIA,GAAG,CAACD,EAAE,KAAK7B,eAAe,CAACO,KAAK,CAAC;QACvF;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRe,YAAY,CAAC,CAAC;MAChB;IACF,CAAC;IAED,MAAMA,YAAY,GAAGA,CAAA,KAAM;MACzBhC,eAAe,CAACQ,KAAK,GAAG,KAAK;MAC7BP,eAAe,CAACO,KAAK,GAAG,IAAI;IAC9B,CAAC;IAED,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B/C,MAAM,CAACgD,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,IAAI,GAAGrE,WAAW,CAAC,CAAC;MAC1B,MAAMsE,IAAI,GAAG9C,WAAW;MACxB,IAAI,CAAC8C,IAAI,EAAE;MAEX,IAAI;QACF,MAAMd,OAAO,GAAG,MAAM9C,MAAM,CAACD,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEG,MAAM,CAAC,CAAC;QACtD,IAAI,CAACmC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;QAEvB,MAAMc,QAAQ,GAAGf,OAAO,CAACG,IAAI,CAAC,CAAC;QAC/BvB,WAAW,GAAGmC,QAAQ,CAACC,KAAK,KAAKF,IAAI,CAACvB,GAAG,GAAGwB,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACC,KAAK;;QAE3E;QACA,MAAME,aAAa,GAAGzE,KAAK,CAACoE,IAAI,EAAE,UAAUC,IAAI,CAACvB,GAAG,EAAE,CAAC;QACvD,MAAM4B,sBAAsB,GAAG1E,KAAK,CAACoE,IAAI,EAAE,iBAAiB,CAAC;;QAE7D;QACA,MAAMO,kBAAkB,GAAG3E,KAAK,CAACoE,IAAI,EAAE,UAAUjC,WAAW,EAAE,CAAC;QAC/D,MAAMyC,kBAAkB,GAAG5E,KAAK,CAACoE,IAAI,EAAE,UAAUjC,WAAW,SAAS,CAAC;;QAEtE;QACAhC,OAAO,CAACuE,sBAAsB,EAAGG,IAAI,IAAK;UACxC,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;YACvB7E,GAAG,CAACwE,aAAa,EAAE;cACjBM,KAAK,EAAE,QAAQ;cACfC,YAAY,EAAEjE,eAAe,CAAC;YAChC,CAAC,CAAC,CAACkE,KAAK,CAACC,CAAC,IAAIhC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEiC,CAAC,CAAC,CAAC;YAExDhF,YAAY,CAACuE,aAAa,CAAC,CAACxE,GAAG,CAAC;cAC9B8E,KAAK,EAAE,SAAS;cAChBC,YAAY,EAAEjE,eAAe,CAAC;YAChC,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;;QAEF;QACAqB,iBAAiB,GAAGjC,OAAO,CAACwE,kBAAkB,EAAGQ,QAAQ,IAAK;UAC5D,MAAMC,MAAM,GAAGD,QAAQ,CAACL,GAAG,CAAC,CAAC;UAC7BlD,eAAe,CAACY,KAAK,GAAG4C,MAAM,EAAEL,KAAK,IAAI,SAAS;QACpD,CAAC,EAAG9B,KAAK,IAAK;UACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD,CAAC,CAAC;;QAEF;QACAZ,iBAAiB,GAAGlC,OAAO,CAACyE,kBAAkB,EAAGO,QAAQ,IAAK;UAC5DtD,iBAAiB,CAACW,KAAK,GAAG2C,QAAQ,CAACL,GAAG,CAAC,CAAC,IAAI,KAAK;QACnD,CAAC,EAAG7B,KAAK,IAAK;UACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAED,MAAMoC,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI,CAAC9D,WAAW,IAAI,CAACY,WAAW,EAAE;MAElC,MAAMiC,IAAI,GAAGrE,WAAW,CAAC,CAAC;MAC1B,MAAMuF,SAAS,GAAGtF,KAAK,CAACoE,IAAI,EAAE,UAAU7C,WAAW,CAACuB,GAAG,SAAS,CAAC;MAEjE7C,GAAG,CAACqF,SAAS,EAAE,IAAI,CAAC,CAACL,KAAK,CAACC,CAAC,IAAIhC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEiC,CAAC,CAAC,CAAC;MAE1E,IAAIhD,aAAa,EAAEqD,YAAY,CAACrD,aAAa,CAAC;MAE9CA,aAAa,GAAGsD,UAAU,CAAC,MAAM;QAC/BvF,GAAG,CAACqF,SAAS,EAAE,KAAK,CAAC,CAACL,KAAK,CAACC,CAAC,IAAIhC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEiC,CAAC,CAAC,CAAC;MAC9E,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IAED,MAAMO,WAAW,GAAGA,CAAA,KAAM;MACxB/D,UAAU,CAACc,KAAK,GAAG,EAAE;MACrB;MACA,IAAIb,SAAS,CAACa,KAAK,EAAE;QACnBb,SAAS,CAACa,KAAK,CAACA,KAAK,GAAG,EAAE;MAC5B;IACF,CAAC;IAED,SAASkD,cAAcA,CAACC,OAAO,EAAE;MAC/B,OAAO,OAAOA,OAAO,KAAK,QAAQ,KAC/BA,OAAO,CAACC,UAAU,CAAC,YAAY,CAAC,IAAI,wBAAwB,CAACC,IAAI,CAACF,OAAO,CAAC,CAAC;IAChF;IAEA,SAASG,eAAeA,CAACC,EAAE,EAAE;MAC3B,IAAI,CAACA,EAAE,EAAE,OAAO,EAAE;MAElB,IAAIC,IAAI;MAER,IAAID,EAAE,EAAEE,MAAM,EAAE;QACdD,IAAI,GAAGD,EAAE,CAACE,MAAM,CAAC,CAAC;MACpB,CAAC,MAAM,IAAIF,EAAE,EAAEG,OAAO,EAAE;QACtBF,IAAI,GAAG,IAAIG,IAAI,CAACJ,EAAE,CAACG,OAAO,GAAG,IAAI,CAAC;MACpC,CAAC,MAAM,IAAIH,EAAE,YAAYI,IAAI,EAAE;QAC7BH,IAAI,GAAGD,EAAE;MACX,CAAC,MAAM;QACL7C,OAAO,CAACkD,IAAI,CAAC,2BAA2B,EAAEL,EAAE,CAAC;QAC7C,OAAO,EAAE;MACX;MAEA,OAAOC,IAAI,CAACK,kBAAkB,CAAC,EAAE,EAAE;QACjCC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;IACA,eAAeC,iBAAiBA,CAACC,GAAG,EAAE;MACpC,MAAM9C,QAAQ,GAAG,EAAE;MACnB,IAAI;QACF,IAAI,CAACvC,MAAM,EAAE;UACX8B,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAC;UACnC,OAAOU,QAAQ;QACjB;QAEA,MAAMJ,OAAO,GAAG,MAAM9C,MAAM,CAACD,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEG,MAAM,CAAC,CAAC;QACtD,IAAI,CAACmC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;UACrBN,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAC;UACnC,OAAOU,QAAQ;QACjB;;QAEA;QACA,MAAM+C,eAAe,GAAGD,GAAG,CACxB5C,MAAM,CAACC,EAAE,IAAIA,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,CAAC,CAC1C6C,GAAG,CAAC,MAAM7C,EAAE,IAAI;UACf,IAAI;YACF,MAAM8C,UAAU,GAAG,MAAMnG,MAAM,CAACD,GAAG,CAACS,EAAE,EAAE,cAAc,EAAE6C,EAAE,CAAC,CAAC;YAC5D,IAAI8C,UAAU,CAACpD,MAAM,CAAC,CAAC,EAAE;cACvB,MAAMqD,WAAW,GAAGD,UAAU,CAAClD,IAAI,CAAC,CAAC;cACrC,OAAO;gBACLI,EAAE,EAAE8C,UAAU,CAAC9C,EAAE;gBACjB,GAAG+C,WAAW;gBACdC,SAAS,EAAED,WAAW,CAACC,SAAS,EAAEb,MAAM,GAAG,CAAC,IAAI,IAAIE,IAAI,CAAC;cAC3D,CAAC;YACH;UACF,CAAC,CAAC,OAAOlD,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,yBAAyBa,EAAE,GAAG,EAAEb,KAAK,CAAC;UACtD;UACA,OAAO,IAAI;QACb,CAAC,CAAC;QAEJ,MAAM8D,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACP,eAAe,CAAC;QACzD/C,QAAQ,CAACO,IAAI,CAAC,GAAG6C,cAAc,CAAClD,MAAM,CAACqD,OAAO,CAAC,CAAC;QAChDvD,QAAQ,CAACwD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACN,SAAS,GAAGO,CAAC,CAACP,SAAS,CAAC;QAClD,OAAOnD,QAAQ;MACjB,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,OAAOU,QAAQ;MACjB;IACF;IACA,MAAM2D,oBAAoB,GAAGA,CAAA,KAAM;MACjC,IAAI,CAAClG,MAAM,EAAE;MAEb,MAAMkC,OAAO,GAAG9C,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEG,MAAM,CAAC;;MAExC;MACAX,MAAM,CAAC6C,OAAO,CAAC,CAACiE,IAAI,CAAEhE,OAAO,IAAK;QAChC,IAAI,CAACA,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;QAEvB,MAAMgE,UAAU,GAAGjE,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,QAAQ,IAAI,EAAE;;QAEhD;QACA6C,iBAAiB,CAACgB,UAAU,CAAC,CAACD,IAAI,CAAC,MAAM;UACvC;UACA,IAAIjF,SAAS,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;;UAE5B;UACA,MAAMmF,eAAe,GAAG,CAAC,CAAC;UAC1BhG,WAAW,CAACe,KAAK,CAACkF,OAAO,CAAC,CAAC3D,GAAG,EAAE4D,KAAK,KAAK;YACxCF,eAAe,CAAC1D,GAAG,CAACD,EAAE,CAAC,GAAG6D,KAAK;UACjC,CAAC,CAAC;UAEFrF,SAAS,GAAG5B,UAAU,CACpBI,UAAU,CAACG,EAAE,EAAE,cAAc,CAAC,EAC7BkE,QAAQ,IAAK;YACZA,QAAQ,CAACyC,UAAU,CAAC,CAAC,CAACF,OAAO,CAAEG,MAAM,IAAK;cACxC,MAAMjF,SAAS,GAAGiF,MAAM,CAACrH,GAAG,CAACsD,EAAE;cAC/B,MAAM+C,WAAW,GAAGgB,MAAM,CAACrH,GAAG,CAACkD,IAAI,CAAC,CAAC;cACrC,MAAMiE,KAAK,GAAGF,eAAe,CAAC7E,SAAS,CAAC;cAExC,IAAI+E,KAAK,KAAKG,SAAS,EAAE;gBACvB;gBACArG,WAAW,CAACe,KAAK,CAACmF,KAAK,CAAC,GAAG;kBACzB,GAAGlG,WAAW,CAACe,KAAK,CAACmF,KAAK,CAAC;kBAC3B,GAAGd,WAAW;kBACdC,SAAS,EAAED,WAAW,CAACC,SAAS,EAAEb,MAAM,GAAG,CAAC,IAAIxE,WAAW,CAACe,KAAK,CAACmF,KAAK,CAAC,CAACb;gBAC3E,CAAC;cACH;YACF,CAAC,CAAC;;YAEF;YACArF,WAAW,CAACe,KAAK,GAAG,CAAC,GAAGf,WAAW,CAACe,KAAK,CAAC;UAC5C,CAAC,EACAS,KAAK,IAAK;YACTC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACtD,CACF,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAGD,eAAe8E,mBAAmBA,CAAA,EAAG;MACnC,MAAMC,IAAI,GAAGxG,UAAU,CAACgB,KAAK,CAACyF,IAAI,CAAC,CAAC;MACpC,MAAMC,KAAK,GAAGxG,UAAU,CAACc,KAAK;MAE9B,IAAI,CAACwF,IAAI,IAAI,CAACE,KAAK,EAAE;MAErB,IAAI;QACF,MAAMrB,WAAW,GAAG;UAClBsB,MAAM,EAAE5G,WAAW,EAAEuB,GAAG;UACxB6C,OAAO,EAAEuC,KAAK,IAAIF,IAAI;UACtBlB,SAAS,EAAE/F,eAAe,CAAC,CAAC;UAC5BK,MAAM,EAAEA,MAAM;UACd4B,QAAQ,EAAE;QACZ,CAAC;QAED,MAAMoF,SAAS,GAAG,MAAMzH,MAAM,CAACG,UAAU,CAACG,EAAE,EAAE,cAAc,CAAC,EAAE4F,WAAW,CAAC;QAC3E,MAAMjG,SAAS,CAACJ,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEG,MAAM,CAAC,EAAE;UACxCuC,QAAQ,EAAE9C,UAAU,CAACuH,SAAS,CAACtE,EAAE,CAAC;UAClCuE,WAAW,EAAEtH,eAAe,CAAC;QAC/B,CAAC,CAAC;QAEFS,UAAU,CAACgB,KAAK,GAAG,EAAE;QACrBd,UAAU,CAACc,KAAK,GAAG,EAAE;QAErB,IAAIjB,WAAW,EAAE;UACf,MAAM6C,IAAI,GAAGrE,WAAW,CAAC,CAAC;UAC1B,MAAMuF,SAAS,GAAGtF,KAAK,CAACoE,IAAI,EAAE,UAAU7C,WAAW,CAACuB,GAAG,SAAS,CAAC;UACjE7C,GAAG,CAACqF,SAAS,EAAE,KAAK,CAAC,CAACL,KAAK,CAACC,CAAC,IAAIhC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEiC,CAAC,CAAC,CAAC;QAC9E;MACF,CAAC,CAAC,OAAOjC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;MACAV,cAAc,CAAC,CAAC;IAClB;IAEA,MAAM+F,MAAM,GAAIpD,CAAC,IAAK;MACpB,MAAMqD,IAAI,GAAGrD,CAAC,CAACsD,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC;MACpC,IAAIF,IAAI,EAAEG,eAAe,CAACH,IAAI,CAAC;IACjC,CAAC;IAED,MAAMI,YAAY,GAAIzD,CAAC,IAAK;MAC1B,MAAMqD,IAAI,GAAGrD,CAAC,CAAC0D,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAIF,IAAI,EAAEG,eAAe,CAACH,IAAI,CAAC;IACjC,CAAC;IAED,MAAMG,eAAe,GAAIH,IAAI,IAAK;MAChC,MAAMM,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QACpBrH,UAAU,CAACc,KAAK,GAAGqG,MAAM,CAACG,MAAM;MAClC,CAAC;MACDH,MAAM,CAACI,aAAa,CAACV,IAAI,CAAC;IAC5B,CAAC;IAED3I,SAAS,CAAC,YAAY;MACpB,IAAI;QACF;QACA,MAAMuE,aAAa,CAAC,CAAC;;QAErB;QACA,MAAMb,OAAO,GAAG9C,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEG,MAAM,CAAC;QACxCkB,SAAS,GAAG5B,UAAU,CAAC4C,OAAO,EAAE,MAAO4F,QAAQ,IAAK;UAClD,IAAIA,QAAQ,CAAC1F,MAAM,CAAC,CAAC,EAAE;YACrB,MAAMc,QAAQ,GAAG4E,QAAQ,CAACxF,IAAI,CAAC,CAAC;YAChC,MAAM8D,UAAU,GAAGlD,QAAQ,CAACX,QAAQ,IAAI,EAAE;;YAE1C;YACA,MAAM6C,iBAAiB,CAACgB,UAAU,CAAC;;YAEnC;YACA,MAAM2B,gBAAgB,GAAG,CAAC,CAAC;YAC3B3B,UAAU,CAACE,OAAO,CAAC5D,EAAE,IAAI;cACvB,IAAI,CAACqF,gBAAgB,CAACrF,EAAE,CAAC,EAAE;gBACzBqF,gBAAgB,CAACrF,EAAE,CAAC,GAAGpD,UAAU,CAACF,GAAG,CAACS,EAAE,EAAE,cAAc,EAAE6C,EAAE,CAAC,EAAGsF,OAAO,IAAK;kBAC1E,IAAIA,OAAO,CAAC5F,MAAM,CAAC,CAAC,EAAE;oBACpB,MAAM6F,WAAW,GAAGD,OAAO,CAAC1F,IAAI,CAAC,CAAC;oBAClC,MAAMiE,KAAK,GAAGlG,WAAW,CAACe,KAAK,CAAC8G,SAAS,CAACvF,GAAG,IAAIA,GAAG,CAACD,EAAE,KAAKA,EAAE,CAAC;oBAE/D,IAAI6D,KAAK,KAAK,CAAC,CAAC,EAAE;sBAChB;sBACAlG,WAAW,CAACe,KAAK,CAACmF,KAAK,CAAC,GAAG;wBACzB,GAAGlG,WAAW,CAACe,KAAK,CAACmF,KAAK,CAAC;wBAC3B,GAAG0B,WAAW;wBACdvC,SAAS,EAAEuC,WAAW,CAACvC,SAAS,EAAEb,MAAM,GAAG,CAAC,IAAIxE,WAAW,CAACe,KAAK,CAACmF,KAAK,CAAC,CAACb;sBAC3E,CAAC;sBACD;sBACArF,WAAW,CAACe,KAAK,GAAG,CAAC,GAAGf,WAAW,CAACe,KAAK,CAAC;oBAC5C;kBACF;gBACF,CAAC,CAAC;cACJ;YACF,CAAC,CAAC;;YAEF;YACA3C,eAAe,CAAC,MAAM;cACpB0J,MAAM,CAACC,MAAM,CAACL,gBAAgB,CAAC,CAACzB,OAAO,CAAC+B,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC;UACJ,CAAC,MAAM;YACLvG,OAAO,CAACkD,IAAI,CAAC,8BAA8B,CAAC;YAC5C3E,WAAW,CAACe,KAAK,GAAG,EAAE;UACxB;QACF,CAAC,EAAGS,KAAK,IAAK;UACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C,CAAC,CAAC;QAEFV,cAAc,CAAC,CAAC;MAClB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC,CAAC;IAEFpD,eAAe,CAAC,MAAM;MACpB,IAAIyC,SAAS,EAAEA,SAAS,CAAC,CAAC;MAE1B,IAAIF,iBAAiB,IAAI,OAAOA,iBAAiB,KAAK,UAAU,EAAE;QAChE,IAAI;UACFA,iBAAiB,CAAC,CAAC;QACrB,CAAC,CAAC,OAAO8C,CAAC,EAAE;UACVhC,OAAO,CAACkD,IAAI,CAAC,6BAA6B,EAAElB,CAAC,CAAC;QAChD;MACF;MAEA,IAAI7C,iBAAiB,IAAI,OAAOA,iBAAiB,KAAK,UAAU,EAAE;QAChE,IAAI;UACFA,iBAAiB,CAAC,CAAC;QACrB,CAAC,CAAC,OAAO6C,CAAC,EAAE;UACVhC,OAAO,CAACkD,IAAI,CAAC,6BAA6B,EAAElB,CAAC,CAAC;QAChD;MACF;MAEA,IAAIhD,aAAa,EAAEqD,YAAY,CAACrD,aAAa,CAAC;MAE9C,IAAIX,WAAW,EAAE;QACf,MAAM6C,IAAI,GAAGrE,WAAW,CAAC,CAAC;QAC1B,MAAM0E,aAAa,GAAGzE,KAAK,CAACoE,IAAI,EAAE,UAAU7C,WAAW,CAACuB,GAAG,EAAE,CAAC;QAC9D7C,GAAG,CAACwE,aAAa,EAAE;UACjBM,KAAK,EAAE,SAAS;UAChBC,YAAY,EAAEjE,eAAe,CAAC;QAChC,CAAC,CAAC,CAACkE,KAAK,CAACC,CAAC,IAAIhC,OAAO,CAACkD,IAAI,CAAC,+BAA+B,EAAElB,CAAC,CAAC,CAAC;MACjE;IACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}