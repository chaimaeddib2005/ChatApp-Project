{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Chat between \" + _toDisplayString($setup.user1) + \" and \" + _toDisplayString($setup.user2), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messageList, msg => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: msg.id\n    }, _toDisplayString(msg.message), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","$setup","user1","user2","_Fragment","_renderList","messageList","msg","key","id","message"],"sources":["C:\\Users\\khadi\\ChatApp-Project\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.id\">\r\n          {{ msg.message }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref,  onBeforeUnmount } from 'vue';\r\n  import { useRoute } from 'vue-router';\r\n  import { doc, getDoc, onSnapshot, getDocs, collection } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  \r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  \r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'messages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`; \r\n  \r\n  const chatRef = doc(db, 'chats', chatId);\r\n  \r\n  chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      console.log('Chat does not exist.');\r\n      messageList.value = [];\r\n    }\r\n  });\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n  "],"mappings":";;uBACIA,mBAAA,CAOM,cANJC,mBAAA,CAAiD,YAA7C,eAAa,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,IAAG,OAAK,GAAAF,gBAAA,CAAGC,MAAA,CAAAE,KAAK,kBACzCJ,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKM,SAAA,QANbC,WAAA,CAI0BJ,MAAA,CAAAK,WAAW,EAAlBC,GAAG;yBAAdT,mBAAA,CAEK;MAF2BU,GAAG,EAAED,GAAG,CAACE;wBACpCF,GAAG,CAACG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}