{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { useAuth } from '@/composables/useAuth';\nimport { useRouter } from 'vue-router'; // Make sure this import exists\nimport { getAuth, sendEmailVerification, defineProps, defineEmits } from 'firebase/auth';\nexport default {\n  __name: 'AuthForm',\n  props: {\n    isLogin: {\n      type: Boolean,\n      required: true\n    }\n  },\n  emits: ['auth-success'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // Initialize router properly\n    const router = useRouter(); // This line is crucial\n\n    const email = ref('');\n    const password = ref('');\n    const name = ref('');\n    const error = ref('');\n    const success = ref('');\n    const loading = ref(false);\n    const {\n      login,\n      register,\n      resetPassword,\n      googleLogin,\n      anonymousLogin\n    } = useAuth();\n    const handleSubmit = async () => {\n      error.value = '';\n      success.value = '';\n      loading.value = true;\n      try {\n        if (props.isLogin) {\n          await login(email.value, password.value);\n          const currentUser = getAuth().currentUser;\n          if (!currentUser?.emailVerified) {\n            await sendEmailVerification(currentUser);\n            throw new Error('Email not verified. A new verification email has been sent.');\n          }\n\n          // Use the router instance we created above\n          router.push('/'); // Changed from emit('auth-success')\n        } else {\n          await register(email.value, password.value, name.value);\n          success.value = 'Registration successful. A verification email has been sent. Please verify your email before logging in.';\n          setTimeout(() => {\n            router.push('/login'); // Use the router instance\n            loading.value = false;\n          }, 3000);\n        }\n      } catch (err) {\n        error.value = cleanFirebaseError(err.message);\n        loading.value = false;\n      }\n    };\n    const handleResetPassword = async () => {\n      error.value = '';\n      success.value = '';\n      loading.value = true;\n      try {\n        await resetPassword(email.value);\n        success.value = 'Password reset email sent!';\n      } catch (err) {\n        error.value = cleanFirebaseError(err.message);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const handleGoogleLogin = async () => {\n      error.value = '';\n      success.value = '';\n      loading.value = true;\n      try {\n        await googleLogin();\n        emit('auth-success');\n      } catch (err) {\n        const code = err.code || '';\n        if (code === 'auth/popup-closed-by-user') {\n          emit('switch-to-register');\n        } else {\n          error.value = cleanFirebaseError(code || err.message);\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n    const handleAnonymousLogin = async () => {\n      error.value = '';\n      success.value = '';\n      loading.value = true;\n      try {\n        await anonymousLogin();\n        emit('auth-success');\n        router.push({\n          name: 'Home',\n          query: {\n            guest: 'true'\n          }\n        });\n      } catch (err) {\n        error.value = cleanFirebaseError(err.message);\n      } finally {\n        loading.value = false;\n      }\n    };\n    function cleanFirebaseError(message) {\n      const map = {\n        'auth/invalid-email': 'Invalid email address.',\n        'auth/user-disabled': 'This account has been disabled.',\n        'auth/user-not-found': 'No account found with this email.',\n        'auth/wrong-password': 'Incorrect password.',\n        'auth/email-already-in-use': 'Email is already in use.',\n        'auth/weak-password': 'Password should be at least 6 characters.',\n        'auth/popup-closed-by-user': 'Google sign-in was cancelled.',\n        'auth/popup-blocked': 'Popup blocked. Please allow popups for this site.',\n        'auth/network-request-failed': 'Network error. Please try again.',\n        'auth/too-many-requests': 'Too many attempts. Please wait and try again later.'\n      };\n      for (const [code, friendlyMessage] of Object.entries(map)) {\n        if (message.includes(code)) return friendlyMessage;\n      }\n      return message.replace(/^Firebase:|\\(auth.*?\\)\\.?/gi, '').trim() || 'An unexpected error occurred.';\n    }\n    const __returned__ = {\n      props,\n      emit,\n      router,\n      email,\n      password,\n      name,\n      error,\n      success,\n      loading,\n      login,\n      register,\n      resetPassword,\n      googleLogin,\n      anonymousLogin,\n      handleSubmit,\n      handleResetPassword,\n      handleGoogleLogin,\n      handleAnonymousLogin,\n      cleanFirebaseError,\n      ref,\n      get useAuth() {\n        return useAuth;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get getAuth() {\n        return getAuth;\n      },\n      get sendEmailVerification() {\n        return sendEmailVerification;\n      },\n      get defineProps() {\n        return defineProps;\n      },\n      get defineEmits() {\n        return defineEmits;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useAuth","useRouter","getAuth","sendEmailVerification","defineProps","defineEmits","props","__props","emit","__emit","router","email","password","name","error","success","loading","login","register","resetPassword","googleLogin","anonymousLogin","handleSubmit","value","isLogin","currentUser","emailVerified","Error","push","setTimeout","err","cleanFirebaseError","message","handleResetPassword","handleGoogleLogin","code","handleAnonymousLogin","query","guest","map","friendlyMessage","Object","entries","includes","replace","trim"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/AuthForm.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <form @submit.prevent=\"handleSubmit\">\r\n        <div class=\"input\">\r\n          <label>Email</label>\r\n          <input v-model=\"email\" type=\"email\" required class=\"input-field\" />\r\n        </div>\r\n  \r\n        <div class=\"input\">\r\n          <label>Password</label>\r\n          <input v-model=\"password\" type=\"password\" required class=\"input-field\" />\r\n        </div>\r\n  \r\n        <div v-if=\"!isLogin\" class=\"input\">\r\n          <label>Name</label>\r\n          <input v-model=\"name\" type=\"text\" required class=\"input-field\" />\r\n        </div>\r\n  \r\n        <button type=\"submit\" :disabled=\"loading\" class=\"auth-button register-btn\">\r\n          {{ isLogin ? 'Login' : 'Register' }}\r\n        </button>\r\n  \r\n        <button\r\n          v-if=\"isLogin\"\r\n          type=\"button\"\r\n          @click=\"handleResetPassword\"\r\n          :disabled=\"loading\"\r\n          class=\"auth-button reset-btn\"\r\n        >\r\n          Forgot password?\r\n        </button>\r\n  \r\n        <p v-if=\"error\" class=\"message error\">{{ error }}</p>\r\n        <p v-if=\"success\" class=\"message success\">{{ success }}</p>\r\n      </form>\r\n  \r\n      <button @click=\"handleGoogleLogin\" :disabled=\"loading\" class=\"auth-button google-btn\">\r\n        Sign in with Google\r\n      </button>\r\n      <button @click=\"handleAnonymousLogin\" :disabled=\"loading\" class=\"auth-button guest-btn\">\r\n        Continue as Guest\r\n      </button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n\r\nimport { ref } from 'vue'\r\nimport { useAuth } from '@/composables/useAuth'\r\nimport { useRouter } from 'vue-router' // Make sure this import exists\r\nimport { getAuth, sendEmailVerification, defineProps, defineEmits } from 'firebase/auth'\r\n\r\nconst props = defineProps({\r\n  isLogin: { type: Boolean, required: true }\r\n})\r\n\r\nconst emit = defineEmits(['auth-success'])\r\n\r\n// Initialize router properly\r\nconst router = useRouter() // This line is crucial\r\n\r\nconst email = ref('')\r\nconst password = ref('')\r\nconst name = ref('')\r\nconst error = ref('')\r\nconst success = ref('')\r\nconst loading = ref(false)\r\n\r\nconst { login, register, resetPassword, googleLogin, anonymousLogin } = useAuth()\r\n  \r\n  \r\nconst handleSubmit = async () => {\r\n  error.value = ''\r\n  success.value = ''\r\n  loading.value = true\r\n  try {\r\n    if (props.isLogin) {\r\n      await login(email.value, password.value)\r\n      const currentUser = getAuth().currentUser\r\n\r\n      if (!currentUser?.emailVerified) {\r\n        await sendEmailVerification(currentUser)\r\n        throw new Error('Email not verified. A new verification email has been sent.')\r\n      }\r\n\r\n      // Use the router instance we created above\r\n      router.push('/') // Changed from emit('auth-success')\r\n    } else {\r\n      await register(email.value, password.value, name.value)\r\n      success.value = 'Registration successful. A verification email has been sent. Please verify your email before logging in.'\r\n\r\n      setTimeout(() => {\r\n        router.push('/login') // Use the router instance\r\n        loading.value = false\r\n      }, 3000)\r\n    }\r\n  } catch (err) {\r\n    error.value = cleanFirebaseError(err.message)\r\n    loading.value = false\r\n  }\r\n}\r\n  \r\n  const handleResetPassword = async () => {\r\n    error.value = ''\r\n    success.value = ''\r\n    loading.value = true\r\n    try {\r\n      await resetPassword(email.value)\r\n      success.value = 'Password reset email sent!'\r\n    } catch (err) {\r\n      error.value = cleanFirebaseError(err.message)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  const handleGoogleLogin = async () => {\r\n    error.value = ''\r\n    success.value = ''\r\n    loading.value = true\r\n    try {\r\n      await googleLogin()\r\n      emit('auth-success')\r\n    } catch (err) {\r\n      const code = err.code || ''\r\n      if (code === 'auth/popup-closed-by-user') {\r\n        emit('switch-to-register')\r\n      } else {\r\n        error.value = cleanFirebaseError(code || err.message)\r\n      }\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  \r\n  const handleAnonymousLogin = async () => {\r\n    error.value = ''\r\n    success.value = ''\r\n    loading.value = true\r\n    try {\r\n      await anonymousLogin()\r\n      emit('auth-success')\r\n      router.push({ name: 'Home', query: { guest: 'true' } })\r\n    } catch (err) {\r\n      error.value = cleanFirebaseError(err.message)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  function cleanFirebaseError(message) {\r\n    const map = {\r\n      'auth/invalid-email': 'Invalid email address.',\r\n      'auth/user-disabled': 'This account has been disabled.',\r\n      'auth/user-not-found': 'No account found with this email.',\r\n      'auth/wrong-password': 'Incorrect password.',\r\n      'auth/email-already-in-use': 'Email is already in use.',\r\n      'auth/weak-password': 'Password should be at least 6 characters.',\r\n      'auth/popup-closed-by-user': 'Google sign-in was cancelled.',\r\n      'auth/popup-blocked': 'Popup blocked. Please allow popups for this site.',\r\n      'auth/network-request-failed': 'Network error. Please try again.',\r\n      'auth/too-many-requests': 'Too many attempts. Please wait and try again later.',\r\n    }\r\n  \r\n    for (const [code, friendlyMessage] of Object.entries(map)) {\r\n      if (message.includes(code)) return friendlyMessage\r\n    }\r\n  \r\n    return message.replace(/^Firebase:|\\(auth.*?\\)\\.?/gi, '').trim() || 'An unexpected error occurred.'\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  form {\r\n    margin: 10px;\r\n  }\r\n  label {\r\n    width: 100px;\r\n    font-weight: bold;\r\n    display: inline-block;\r\n  }\r\n  .input {\r\n    margin: 5px;\r\n  }\r\n  .input-field {\r\n    padding: 8px;\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n  }\r\n  .auth-button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    width: 100%;\r\n    padding: 16px 24px;\r\n    border: none;\r\n    border-radius: 12px;\r\n    font-size: 1.1rem;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);\r\n    position: relative;\r\n    overflow: hidden;\r\n    margin: 12px 0;\r\n  }\r\n  \r\n  .auth-button:hover {\r\n    transform: translateY(-2px);\r\n  }\r\n  \r\n  .register-btn {\r\n    background-color: #7e57c2;\r\n    color: white;\r\n    box-shadow: 0 4px 12px rgba(126, 87, 194, 0.3);\r\n  }\r\n  \r\n  .register-btn:hover {\r\n    box-shadow: 0 6px 16px rgba(126, 87, 194, 0.4);\r\n  }\r\n  \r\n  .reset-btn {\r\n    background-color: #f5f5f5;\r\n    color: #5a4a42;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  }\r\n  \r\n  .reset-btn:hover {\r\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\r\n    background-color: #eeeeee;\r\n  }\r\n  \r\n  .google-btn {\r\n    background-color: white;\r\n    color: #5a4a42;\r\n    border: 1px solid #e0e0e0;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  }\r\n  \r\n  .google-btn:hover {\r\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\r\n    background-color: #f8f8f8;\r\n  }\r\n  \r\n  .guest-btn {\r\n    background-color: #f5f5f5;\r\n    color: #5a4a42;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  }\r\n  \r\n  .guest-btn:hover {\r\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\r\n    background-color: #eeeeee;\r\n  }\r\n  \r\n  .message {\r\n    margin: 10px 0;\r\n    padding: 8px;\r\n    border-radius: 6px;\r\n  }\r\n  \r\n  .success {\r\n    background-color: #e6ffed;\r\n    color: #256029;\r\n    border: 1px solid #b2f5ea;\r\n  }\r\n  \r\n  .error {\r\n    background-color: #ffe6e6;\r\n    color: #990000;\r\n    border: 1px solid #f5b2b2;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}