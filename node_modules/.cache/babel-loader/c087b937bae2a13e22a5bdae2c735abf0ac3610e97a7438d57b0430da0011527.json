{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"status-indicator\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  class: \"timestamp\"\n};\nconst _hoisted_8 = {\n  class: \"input-area\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"image-preview\"\n};\nconst _hoisted_10 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.otherUserId ? (_openBlock(), _createElementBlock(\"small\", _hoisted_2, [_createTextVNode(_toDisplayString($setup.otherUserStatus === 'online' ? 'Online' : 'Offline') + \" \", 1 /* TEXT */), $setup.isOtherUserTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \" (typing...)\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messageList, msg => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: msg.id,\n      class: _normalizeClass(msg.sender === $setup.currentUser?.uid ? 'sent' : 'received')\n    }, [$setup.isImageMessage(msg.message) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"img\", {\n      src: msg.message,\n      alt: \"Image\",\n      class: \"chat-image\"\n    }, null, 8 /* PROPS */, _hoisted_5)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString(msg.message), 1 /* TEXT */)), _createElementVNode(\"small\", _hoisted_7, _toDisplayString($setup.formatTimestamp(msg.timestamp)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newMessage = $event),\n    onInput: $setup.handleTyping,\n    onKeyup: _withKeys($setup.sendCombinedMessage, [\"enter\"])\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _withModifiers($setup.sendCombinedMessage, [\"prevent\"])\n  }, _cache[3] || (_cache[3] = [_createElementVNode(\"i\", {\n    class: \"fas fa-paper-plane\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"div\", {\n    onDrop: _withModifiers($setup.onDrop, [\"prevent\"]),\n    onDragover: _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"prevent\"]))\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"fileInput\",\n    accept: \"image/*\",\n    onChange: $setup.onFileChange,\n    style: {\n      \"display\": \"none\"\n    }\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), $setup.previewUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"img\", {\n    src: $setup.previewUrl,\n    alt: \"Preview\",\n    class: \"chat-image\"\n  }, null, 8 /* PROPS */, _hoisted_10)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$refs.fileInput.click()),\n    class: \"icon-button\"\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"i\", {\n    class: \"fas fa-image\"\n  }, null, -1 /* HOISTED */)]))], 32 /* NEED_HYDRATION */)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$setup","otherUserId","_hoisted_2","_createTextVNode","_toDisplayString","otherUserStatus","isOtherUserTyping","_hoisted_3","_createCommentVNode","_createElementVNode","_Fragment","_renderList","messageList","msg","id","_normalizeClass","sender","currentUser","uid","isImageMessage","message","_hoisted_4","src","alt","_hoisted_5","_hoisted_6","_hoisted_7","formatTimestamp","timestamp","_hoisted_8","type","_cache","$event","newMessage","onInput","handleTyping","onKeyup","_withKeys","sendCombinedMessage","onClick","_withModifiers","onDrop","onDragover","ref","accept","onChange","onFileChange","style","previewUrl","_hoisted_9","_hoisted_10","_ctx","$refs","fileInput","click"],"sources":["C:\\Users\\khadi\\ChatApp-Project\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <small v-if=\"otherUserId\" class=\"status-indicator\">\r\n      {{ otherUserStatus === 'online' ? 'Online' : 'Offline' }}\r\n      <span v-if=\"isOtherUserTyping\"> (typing...)</span>\r\n    </small>\r\n    <ul>\r\n      <li\r\n        v-for=\"msg in messageList\"\r\n        :key=\"msg.id\"\r\n        :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n      >\r\n        <div v-if=\"isImageMessage(msg.message)\">\r\n          <img :src=\"msg.message\" alt=\"Image\" class=\"chat-image\" />\r\n        </div>\r\n        <div v-else>\r\n          {{ msg.message }}\r\n        </div>\r\n        <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n      </li>\r\n    </ul>\r\n    <div class=\"input-area\">\r\n      <input \r\n        type=\"text\" \r\n        v-model=\"newMessage\"\r\n        @input=\"handleTyping\"\r\n        @keyup.enter=\"sendCombinedMessage\"\r\n      >\r\n      <button @click.prevent=\"sendCombinedMessage\">\r\n        <i class=\"fas fa-paper-plane\"></i>\r\n      </button>\r\n      <div @drop.prevent=\"onDrop\" @dragover.prevent>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileInput\"\r\n          accept=\"image/*\"\r\n          @change=\"onFileChange\"\r\n          style=\"display: none\"\r\n        />\r\n        <div v-if=\"previewUrl\" class=\"image-preview\">\r\n          <img :src=\"previewUrl\" alt=\"Preview\" class=\"chat-image\" />\r\n        </div>\r\n        <button @click=\"$refs.fileInput.click()\" class=\"icon-button\">\r\n          <i class=\"fas fa-image\"></i>\r\n        </button>\r\n      </div>\r\n    </div> \r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue, off } from 'firebase/database';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAuth } from 'firebase/auth';\r\nimport {\r\n  doc,\r\n  getDoc,\r\n  onSnapshot,\r\n  addDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n  collection,\r\n  serverTimestamp,\r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\n// Route & Auth\r\nconst route = useRoute();\r\nconst chatId = route.params.chatId;\r\nconst auth = getAuth();\r\nconst currentUser = auth.currentUser;\r\n\r\n// Refs\r\nconst newMessage = ref('');\r\nconst messageList = ref([]);\r\nconst previewUrl = ref('');\r\nconst fileInput = ref(null);\r\nconst otherUserStatus = ref('offline');\r\nconst isOtherUserTyping = ref(false);\r\nlet typingTimeout = null;\r\nlet otherUserId = null;\r\nlet unsubscribeStatus = null;\r\nlet unsubscribeTyping = null;\r\n\r\n// Presence System Setup\r\nconst setupPresence = async () => {\r\n  const rtdb = getDatabase();\r\n  const user = currentUser;\r\n  if (!user) return;\r\n\r\n  // Get chat data to determine the other user\r\n  const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n  if (!chatDoc.exists()) return;\r\n\r\n  const chatData = chatDoc.data();\r\n  otherUserId = chatData.user1 === user.uid ? chatData.user2 : chatData.user1;\r\n\r\n  // Current user's status reference\r\n  const userStatusRef = dbRef(rtdb, `status/${user.uid}`);\r\n  const userStatusConnectedRef = dbRef(rtdb, '.info/connected');\r\n  \r\n  // Other user's status reference\r\n  const otherUserStatusRef = dbRef(rtdb, `status/${otherUserId}`);\r\n  const otherUserTypingRef = dbRef(rtdb, `status/${otherUserId}/typing`);\r\n\r\n  // Monitor connection state\r\n  onValue(userStatusConnectedRef, (snap) => {\r\n    if (snap.val() === true) {\r\n      // User is connected\r\n      set(userStatusRef, {\r\n        state: 'online',\r\n        last_changed: serverTimestamp(),\r\n      });\r\n\r\n      // Setup disconnect handler\r\n      onDisconnect(userStatusRef).set({\r\n        state: 'offline',\r\n        last_changed: serverTimestamp(),\r\n      });\r\n    }\r\n  });\r\n\r\n  // Monitor other user's status\r\n  unsubscribeStatus = onValue(otherUserStatusRef, (snapshot) => {\r\n    const status = snapshot.val();\r\n    otherUserStatus.value = status?.state || 'offline';\r\n  });\r\n\r\n  // Monitor other user's typing status\r\n  unsubscribeTyping = onValue(otherUserTypingRef, (snapshot) => {\r\n    isOtherUserTyping.value = snapshot.val() || false;\r\n  });\r\n};\r\n\r\n// Typing indicator handler\r\nconst handleTyping = () => {\r\n  if (!currentUser || !otherUserId) return;\r\n  \r\n  const rtdb = getDatabase();\r\n  const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n  \r\n  // Set typing to true\r\n  set(typingRef, true);\r\n  \r\n  // Clear any existing timeout\r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  // Set timeout to set typing to false after 3 seconds of inactivity\r\n  typingTimeout = setTimeout(() => {\r\n    set(typingRef, false);\r\n  }, 3000);\r\n};\r\n\r\n// Image check helper\r\nfunction isImageMessage(message) {\r\n  return typeof message === 'string' &&\r\n    (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\r\n}\r\n\r\n// Timestamp formatter\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n  const date = ts.toDate();\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n// Corrected message loading function\r\nasync function loadMessagesByIds(ids) {\r\n  const messages = [];\r\n  try {\r\n    // First verify we have a valid chatId\r\n    if (!chatId) {\r\n      console.error(\"No chatId provided\");\r\n      return;\r\n    }\r\n\r\n    // Get the chat document first to verify it exists\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) {\r\n      console.error(\"Chat doesn't exist\");\r\n      return;\r\n    }\r\n\r\n    // Load each message\r\n    for (const id of ids) {\r\n      try {\r\n        // IMPORTANT: Verify the message ID is valid\r\n        if (!id || typeof id !== 'string') {\r\n          console.warn(\"Invalid message ID:\", id);\r\n          continue;\r\n        }\r\n\r\n        const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n        if (messageDoc.exists()) {\r\n          const messageData = messageDoc.data();\r\n          messages.push({\r\n            id: messageDoc.id,\r\n            ...messageData,\r\n            // Ensure timestamp is properly converted\r\n            timestamp: messageData.timestamp?.toDate?.() || new Date()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error loading message ${id}:`, error);\r\n      }\r\n    }\r\n\r\n    // Sort messages by timestamp (oldest first)\r\n    messages.sort((a, b) => a.timestamp - b.timestamp);\r\n    messageList.value = messages;\r\n  } catch (error) {\r\n    console.error(\"Error loading messages:\", error);\r\n  }\r\n}\r\n\r\n// Send message (updated for your structure)\r\nasync function sendCombinedMessage() {\r\n  const text = newMessage.value.trim();\r\n  const image = previewUrl.value;\r\n\r\n  if (!text && !image) return;\r\n\r\n  try {\r\n    // 1. Add the new message to chatMessages collection\r\n    const messageData = {\r\n      sender: currentUser?.uid,\r\n      message: image || text,\r\n      timestamp: serverTimestamp(),\r\n      chatId: chatId // Important: reference which chat this belongs to\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n\r\n    // 2. Update the chats document with the new message reference\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id),\r\n      lastUpdated: serverTimestamp()\r\n    });\r\n\r\n    // 3. Clear inputs and typing status\r\n    newMessage.value = '';\r\n    previewUrl.value = '';\r\n    \r\n    if (currentUser) {\r\n      const rtdb = getDatabase();\r\n      const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n      set(typingRef, false);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n  }\r\n}\r\n\r\n// Drag & drop handler\r\nconst onDrop = (e) => {\r\n  const file = e.dataTransfer.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\n// File input handler\r\nconst onFileChange = (e) => {\r\n  const file = e.target.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\n// Convert image to base64 for preview\r\nconst convertToBase64 = (file) => {\r\n  const reader = new FileReader();\r\n  reader.onload = () => {\r\n    previewUrl.value = reader.result;\r\n  };\r\n  reader.readAsDataURL(file);\r\n};\r\n\r\n// Subscribe to chat updates on mount\r\nlet chatUnsub = null;\r\nonMounted(async () => {\r\n  await setupPresence();\r\n  \r\n  const chatRef = doc(db, 'chats', chatId);\r\n  chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      console.warn('Chat document does not exist');\r\n      messageList.value = [];\r\n    }\r\n  });\r\n});\r\n\r\n// Cleanup on unmount\r\nonBeforeUnmount(() => {\r\n  if (chatUnsub) chatUnsub();\r\n  if (unsubscribeStatus) off(unsubscribeStatus);\r\n  if (unsubscribeTyping) off(unsubscribeTyping);\r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  // Set offline status when component unmounts\r\n  if (currentUser) {\r\n    const rtdb = getDatabase();\r\n    const userStatusRef = dbRef(rtdb, `status/${currentUser.uid}`);\r\n    set(userStatusRef, {\r\n      state: 'offline',\r\n      last_changed: serverTimestamp(),\r\n    });\r\n  }\r\n});\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n  <style scoped>\r\n \r\n .container {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 40px auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #ffffff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n  margin-bottom: 16px;\r\n  color: #333;\r\n}\r\n\r\nul {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 10px;\r\n  margin-bottom: 20px;\r\n  max-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n/* Message bubble */\r\nli {\r\n  list-style: none;\r\n  max-width: 75%;\r\n  padding: 10px 14px;\r\n  border-radius: 20px;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n  line-height: 1.5;\r\n  font-size: 0.95rem;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.sent {\r\n  align-self: flex-end;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.received {\r\n  align-self: flex-start;\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.chat-image {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.7rem;\r\n  margin-top: 4px;\r\n  opacity: 0.7;\r\n  text-align: right;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: auto;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  padding: 10px 14px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\ninput[type=\"text\"]:focus {\r\n  border-color: #4caf50;\r\n}\r\n\r\nbutton {\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 42px;\r\n  height: 42px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #43a047;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n.icon-button {\r\n  background-color: #2196f3;\r\n  margin-left: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  background-color: #1e88e5;\r\n}\r\n\r\n.image-preview {\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.image-preview img {\r\n  max-width: 120px;\r\n  border-radius: 12px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n  \r\n\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}