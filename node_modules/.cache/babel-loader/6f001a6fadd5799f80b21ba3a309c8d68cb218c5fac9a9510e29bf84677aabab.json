{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"status-indicator\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  ref: \"messagesContainer\"\n};\nconst _hoisted_5 = [\"onMouseover\"];\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = {\n  class: \"timestamp\"\n};\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = {\n  class: \"input-area\"\n};\nconst _hoisted_12 = {\n  key: 0,\n  class: \"image-preview\"\n};\nconst _hoisted_13 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: $setup.goBackToChatList,\n    id: \"gobackbut\"\n  }, \"Back to Chat List\"), $setup.otherUserId ? (_openBlock(), _createElementBlock(\"small\", _hoisted_2, [_createTextVNode(_toDisplayString($setup.otherUserStatus || 'offline') + \" \", 1 /* TEXT */), $setup.isOtherUserTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \" (typing...)\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messageList, msg => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: msg.id,\n      class: _normalizeClass(msg.sender === $setup.currentUser?.uid ? 'sent' : 'received'),\n      onMouseover: $event => $setup.hoveredMessage = msg.id,\n      onMouseleave: _cache[0] || (_cache[0] = $event => $setup.hoveredMessage = null)\n    }, [$setup.isImageMessage(msg.message) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n      src: msg.message,\n      alt: \"Image\",\n      class: \"chat-image\"\n    }, null, 8 /* PROPS */, _hoisted_7)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _toDisplayString(msg.message), 1 /* TEXT */)), _createElementVNode(\"small\", _hoisted_9, _toDisplayString($setup.formatTimestamp(msg.timestamp)), 1 /* TEXT */), msg.sender === $setup.currentUser?.uid && $setup.hoveredMessage === msg.id ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 2,\n      onClick: $event => $setup.deleteMessage(msg.id),\n      class: \"delete-button\"\n    }, [...(_cache[4] || (_cache[4] = [_createElementVNode(\"i\", {\n      class: \"fas fa-trash\"\n    }, null, -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_10)) : _createCommentVNode(\"v-if\", true)], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newMessage = $event),\n    onInput: $setup.handleTyping,\n    onKeyup: _withKeys($setup.sendCombinedMessage, [\"enter\"])\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _withModifiers($setup.sendCombinedMessage, [\"prevent\"])\n  }, _cache[5] || (_cache[5] = [_createElementVNode(\"i\", {\n    class: \"fas fa-paper-plane\"\n  }, null, -1 /* HOISTED */)])), _createElementVNode(\"div\", {\n    onDrop: _withModifiers($setup.onDrop, [\"prevent\"]),\n    onDragover: _cache[3] || (_cache[3] = _withModifiers(() => {}, [\"prevent\"]))\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"fileInput\",\n    accept: \"image/*\",\n    onChange: $setup.onFileChange,\n    style: {\n      \"display\": \"none\"\n    }\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), $setup.previewUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"img\", {\n    src: $setup.previewUrl,\n    alt: \"Preview\",\n    class: \"chat-image\"\n  }, null, 8 /* PROPS */, _hoisted_13), _createElementVNode(\"button\", {\n    onClick: $setup.cancelImage,\n    class: \"cancel-button\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"i\", {\n    class: \"fas fa-times\"\n  }, null, -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.$refs.fileInput.click()),\n    class: \"icon-button\"\n  }, _cache[7] || (_cache[7] = [_createElementVNode(\"i\", {\n    class: \"fas fa-image\"\n  }, null, -1 /* HOISTED */)]))], 32 /* NEED_HYDRATION */)])]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","onClick","$setup","goBackToChatList","id","otherUserId","_hoisted_2","_createTextVNode","_toDisplayString","otherUserStatus","isOtherUserTyping","_hoisted_3","_createCommentVNode","_hoisted_4","_Fragment","_renderList","messageList","msg","_normalizeClass","sender","currentUser","uid","onMouseover","$event","hoveredMessage","onMouseleave","_cache","isImageMessage","message","_hoisted_6","src","alt","_hoisted_7","_hoisted_8","_hoisted_9","formatTimestamp","timestamp","deleteMessage","_hoisted_10","_hoisted_5","_hoisted_11","type","newMessage","onInput","handleTyping","onKeyup","_withKeys","sendCombinedMessage","_withModifiers","onDrop","onDragover","accept","onChange","onFileChange","style","previewUrl","_hoisted_12","_hoisted_13","cancelImage","_ctx","$refs","fileInput","click"],"sources":["C:\\Users\\khadi\\ChatApp-Project\\src\\components\\ChatPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <button @click=\"goBackToChatList\" id=\"gobackbut\">Back to Chat List</button>\r\n    <small v-if=\"otherUserId\" class=\"status-indicator\">\r\n      {{ otherUserStatus || 'offline' }}\r\n      <span v-if=\"isOtherUserTyping\"> (typing...)</span>\r\n    </small>\r\n    <ul ref=\"messagesContainer\">\r\n      <li\r\n        v-for=\"msg in messageList\"\r\n        :key=\"msg.id\"\r\n        :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n        @mouseover=\"hoveredMessage = msg.id\"\r\n        @mouseleave=\"hoveredMessage = null\"\r\n      >\r\n        <div v-if=\"isImageMessage(msg.message)\">\r\n          <img :src=\"msg.message\" alt=\"Image\" class=\"chat-image\" />\r\n        </div>\r\n        <div v-else>\r\n          {{ msg.message }}\r\n        </div>\r\n        <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        <button \r\n          v-if=\"msg.sender === currentUser?.uid && hoveredMessage === msg.id\"\r\n          @click=\"deleteMessage(msg.id)\"\r\n          class=\"delete-button\"\r\n        >\r\n          <i class=\"fas fa-trash\"></i>\r\n    </button>\r\n      </li>\r\n    </ul>\r\n    <div class=\"input-area\">\r\n      <input \r\n        type=\"text\" \r\n        v-model=\"newMessage\"\r\n        @input=\"handleTyping\"\r\n        @keyup.enter=\"sendCombinedMessage\"\r\n      >\r\n      <button @click.prevent=\"sendCombinedMessage\">\r\n        <i class=\"fas fa-paper-plane\"></i>\r\n      </button>\r\n      <div @drop.prevent=\"onDrop\" @dragover.prevent>\r\n        <input\r\n          type=\"file\"\r\n          ref=\"fileInput\"\r\n          accept=\"image/*\"\r\n          @change=\"onFileChange\"\r\n          style=\"display: none\"\r\n        />\r\n        <div v-if=\"previewUrl\" class=\"image-preview\">\r\n          <img :src=\"previewUrl\" alt=\"Preview\" class=\"chat-image\" />\r\n          <button @click=\"cancelImage\" class=\"cancel-button\">\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n        </div>\r\n        <button @click=\"$refs.fileInput.click()\" class=\"icon-button\">\r\n          <i class=\"fas fa-image\"></i>\r\n        </button>\r\n      </div>\r\n    </div> \r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onBeforeUnmount, nextTick } from 'vue';\r\nimport { getDatabase, ref as dbRef, set, onDisconnect, onValue} from 'firebase/database';\r\nimport { useRoute } from 'vue-router';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { useRouter } from 'vue-router';\r\nimport {\r\n  doc,\r\n  getDoc,\r\n  onSnapshot,\r\n  addDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n  collection,\r\n  serverTimestamp,\r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst chatId = route.params.chatId;\r\nconst auth = getAuth();\r\nconst currentUser = auth.currentUser;\r\n\r\n// Refs\r\nconst newMessage = ref('');\r\nconst messageList = ref([]);\r\nconst previewUrl = ref('');\r\nconst fileInput = ref(null);\r\nconst otherUserStatus = ref('offline');\r\nconst isOtherUserTyping = ref(false);\r\nconst messagesContainer = ref(null);\r\nconst hoveredMessage = ref(null);\r\nlet typingTimeout = null;\r\nlet otherUserId = null;\r\nlet unsubscribeStatus = null;\r\nlet unsubscribeTyping = null;\r\nlet chatUnsub = null;\r\n\r\n\r\nconst scrollToBottom = () => {\r\n  nextTick(() => {\r\n    if (messagesContainer.value) {\r\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\r\n    }\r\n  });\r\n};\r\n\r\nconst deleteMessage = async (messageId) => {\r\n  if (!confirm('Are you sure you want to delete this message?')) return;\r\n  \r\n  try {\r\n    // First remove from chat's messages array\r\n    const chatRef = doc(db, 'chats', chatId);\r\n    const chatDoc = await getDoc(chatRef);\r\n    \r\n    if (chatDoc.exists()) {\r\n      const currentMessages = chatDoc.data().messages || [];\r\n      const updatedMessages = currentMessages.filter(id => id !== messageId);\r\n      \r\n      await updateDoc(chatRef, {\r\n        messages: updatedMessages\r\n      });\r\n      \r\n      // Then delete the message document itself\r\n      await deleteDoc(doc(db, 'chatMessages', messageId));\r\n      \r\n      // Update local state\r\n      messageList.value = messageList.value.filter(msg => msg.id !== messageId);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting message:', error);\r\n    alert('Failed to delete message');\r\n  }\r\n};\r\n\r\nconst goBackToChatList = () => {\r\n  router.push('/chatList');\r\n};\r\n\r\nconst setupPresence = async () => {\r\n  const rtdb = getDatabase();\r\n  const user = currentUser;\r\n  if (!user) return;\r\n\r\n  try {\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) return;\r\n\r\n    const chatData = chatDoc.data();\r\n    otherUserId = chatData.user1 === user.uid ? chatData.user2 : chatData.user1;\r\n\r\n    // Current user's status\r\n    const userStatusRef = dbRef(rtdb, `status/${user.uid}`);\r\n    const userStatusConnectedRef = dbRef(rtdb, '.info/connected');\r\n    \r\n    // Other user's references\r\n    const otherUserStatusRef = dbRef(rtdb, `status/${otherUserId}`);\r\n    const otherUserTypingRef = dbRef(rtdb, `status/${otherUserId}/typing`);\r\n\r\n    // Connection state\r\n    onValue(userStatusConnectedRef, (snap) => {\r\n      if (snap.val() === true) {\r\n        set(userStatusRef, {\r\n          state: 'online',\r\n          last_changed: serverTimestamp(),\r\n        }).catch(e => console.error(\"Error setting status:\", e));\r\n\r\n        onDisconnect(userStatusRef).set({\r\n          state: 'offline',\r\n          last_changed: serverTimestamp(),\r\n        });\r\n      }\r\n    });\r\n\r\n    // Other user's status\r\n    unsubscribeStatus = onValue(otherUserStatusRef, (snapshot) => {\r\n      const status = snapshot.val();\r\n      otherUserStatus.value = status?.state || 'offline';\r\n    }, (error) => {\r\n      console.error(\"Status listener error:\", error);\r\n    });\r\n\r\n    // Typing status\r\n    unsubscribeTyping = onValue(otherUserTypingRef, (snapshot) => {\r\n      isOtherUserTyping.value = snapshot.val() || false;\r\n    }, (error) => {\r\n      console.error(\"Typing listener error:\", error);\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error setting up presence:\", error);\r\n  }\r\n};\r\n\r\nconst handleTyping = () => {\r\n  if (!currentUser || !otherUserId) return;\r\n  \r\n  const rtdb = getDatabase();\r\n  const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n  \r\n  set(typingRef, true).catch(e => console.error(\"Error setting typing:\", e));\r\n  \r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  typingTimeout = setTimeout(() => {\r\n    set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\r\n  }, 3000);\r\n};\r\n\r\nconst cancelImage = () => {\r\n  previewUrl.value = '';\r\n  // Clear the file input as well\r\n  if (fileInput.value) {\r\n    fileInput.value.value = '';\r\n  }\r\n};\r\n\r\nfunction isImageMessage(message) {\r\n  return typeof message === 'string' &&\r\n    (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/i.test(message));\r\n}\r\n\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n\r\n  let date;\r\n  \r\n  if (ts?.toDate) {\r\n    date = ts.toDate();\r\n  } else if (ts?.seconds) {\r\n    date = new Date(ts.seconds * 1000);\r\n  } else if (ts instanceof Date) {\r\n    date = ts;\r\n  } else {\r\n    console.warn(\"Unknown timestamp format:\", ts);\r\n    return '';\r\n  }\r\n\r\n  return date.toLocaleTimeString([], { \r\n    hour: '2-digit', \r\n    minute: '2-digit' \r\n  });\r\n}\r\n\r\nasync function loadMessagesByIds(ids) {\r\n  const messages = [];\r\n  try {\r\n    if (!chatId) {\r\n      console.error(\"No chatId provided\");\r\n      return;\r\n    }\r\n\r\n    const chatDoc = await getDoc(doc(db, 'chats', chatId));\r\n    if (!chatDoc.exists()) {\r\n      console.error(\"Chat doesn't exist\");\r\n      return;\r\n    }\r\n\r\n    for (const id of ids) {\r\n      try {\r\n        if (!id || typeof id !== 'string') {\r\n          console.warn(\"Invalid message ID:\", id);\r\n          continue;\r\n        }\r\n\r\n        const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n        if (messageDoc.exists()) {\r\n          const messageData = messageDoc.data();\r\n          messages.push({\r\n            id: messageDoc.id,\r\n            ...messageData,\r\n            timestamp: messageData.timestamp?.toDate?.() || new Date()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error loading message ${id}:`, error);\r\n      }\r\n    }\r\n\r\n    messages.sort((a, b) => a.timestamp - b.timestamp);\r\n    messageList.value = messages;\r\n    scrollToBottom(); \r\n  } catch (error) {\r\n    console.error(\"Error loading messages:\", error);\r\n  }\r\n}\r\n\r\nasync function sendCombinedMessage() {\r\n  const text = newMessage.value.trim();\r\n  const image = previewUrl.value;\r\n\r\n  if (!text && !image) return;\r\n\r\n  try {\r\n    const messageData = {\r\n      sender: currentUser?.uid,\r\n      message: image || text,\r\n      timestamp: serverTimestamp(),\r\n      chatId: chatId\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id),\r\n      lastUpdated: serverTimestamp()\r\n    });\r\n\r\n    newMessage.value = '';\r\n    previewUrl.value = '';\r\n    \r\n    if (currentUser) {\r\n      const rtdb = getDatabase();\r\n      const typingRef = dbRef(rtdb, `status/${currentUser.uid}/typing`);\r\n      set(typingRef, false).catch(e => console.error(\"Error clearing typing:\", e));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n  }\r\n  scrollToBottom();\r\n}\r\n\r\nconst onDrop = (e) => {\r\n  const file = e.dataTransfer.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\nconst onFileChange = (e) => {\r\n  const file = e.target.files[0];\r\n  if (file) convertToBase64(file);\r\n};\r\n\r\nconst convertToBase64 = (file) => {\r\n  const reader = new FileReader();\r\n  reader.onload = () => {\r\n    previewUrl.value = reader.result;\r\n  };\r\n  reader.readAsDataURL(file);\r\n};\r\n\r\nonMounted(async () => {\r\n  try {\r\n    await setupPresence();\r\n    \r\n    const chatRef = doc(db, 'chats', chatId);\r\n    chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n      if (chatSnap.exists()) {\r\n        const chatData = chatSnap.data();\r\n        const messageIds = chatData.messages || [];\r\n        loadMessagesByIds(messageIds);\r\n      } else {\r\n        console.warn('Chat document does not exist');\r\n        messageList.value = [];\r\n      }\r\n    }, (error) => {\r\n      console.error(\"Chat listener error:\", error);\r\n    });\r\n    scrollToBottom();\r\n  } catch (error) {\r\n    console.error(\"Error initializing chat:\", error);\r\n  }\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (chatUnsub) chatUnsub();\r\n  \r\n  if (unsubscribeStatus && typeof unsubscribeStatus === 'function') {\r\n    try {\r\n      unsubscribeStatus();\r\n    } catch (e) {\r\n      console.warn(\"Error unsubscribing status:\", e);\r\n    }\r\n  }\r\n  \r\n  if (unsubscribeTyping && typeof unsubscribeTyping === 'function') {\r\n    try {\r\n      unsubscribeTyping();\r\n    } catch (e) {\r\n      console.warn(\"Error unsubscribing typing:\", e);\r\n    }\r\n  }\r\n  \r\n  if (typingTimeout) clearTimeout(typingTimeout);\r\n  \r\n  if (currentUser) {\r\n    const rtdb = getDatabase();\r\n    const userStatusRef = dbRef(rtdb, `status/${currentUser.uid}`);\r\n    set(userStatusRef, {\r\n      state: 'offline',\r\n      last_changed: serverTimestamp(),\r\n    }).catch(e => console.warn(\"Error setting offline status:\", e));\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 40px auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #ffffff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n#gobackbut{\r\n  width: 150px;\r\n  height: 35px;\r\n  border-radius: 10px;\r\n}\r\n\r\nul {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 10px;\r\n  margin-bottom: 20px;\r\n  max-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n  max-width: 75%;\r\n  padding: 10px 14px;\r\n  border-radius: 20px;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n  line-height: 1.5;\r\n  font-size: 0.95rem;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.sent {\r\n  align-self: flex-end;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.received {\r\n  align-self: flex-start;\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.chat-image {\r\n  max-width: 100%;\r\n  border-radius: 10px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.7rem;\r\n  margin-top: 4px;\r\n  opacity: 0.7;\r\n  text-align: right;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  margin-top: auto;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  flex: 1;\r\n  padding: 10px 14px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\ninput[type=\"text\"]:focus {\r\n  border-color: #4caf50;\r\n}\r\n\r\nbutton {\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 42px;\r\n  height: 42px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #43a047;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n.icon-button {\r\n  background-color: #2196f3;\r\n  margin-left: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  background-color: #1e88e5;\r\n}\r\n\r\n.image-preview {\r\n  position: relative;\r\n  margin-top: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.cancel-button {\r\n  position: absolute;\r\n  top: -10px;\r\n  right: -10px;\r\n  background-color: #ff4444;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  padding: 0;\r\n}\r\n\r\n.cancel-button:hover {\r\n  background-color: #cc0000;\r\n}\r\n\r\n.cancel-button i {\r\n  font-size: 12px;\r\n}\r\n\r\n\r\n.image-preview img {\r\n  max-width: 120px;\r\n  border-radius: 12px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.status-indicator {\r\n  display: block;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  color: #666;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}