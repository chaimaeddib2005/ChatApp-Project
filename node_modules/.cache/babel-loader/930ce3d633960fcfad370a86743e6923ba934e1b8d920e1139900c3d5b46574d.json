{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onBeforeUnmount, onMounted } from 'vue';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, getDocs } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { useRoute } from 'vue-router';\nimport { getAuth } from 'firebase/auth';\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const previewUrl = ref('');\n    const fileInput = ref(null);\n    const userRef = doc(db, 'users', auth.currentUser.uid);\n    const route = useRoute();\n    const user1 = route.params.user1;\n    const user2 = route.params.user2;\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    const newMessage = ref(\"\");\n    const messageList = ref([]);\n    let chatUnsub = null;\n    let chatId = null;\n\n    // 🔍 Helper to find the existing chat between user1 and user2\n    async function findChatId(user1, user2) {\n      const chatsRef = collection(db, 'chats');\n      const snapshot = await getDocs(chatsRef);\n      for (const docSnap of snapshot.docs) {\n        const data = docSnap.data();\n        const users = [data.user1, data.user2];\n        if (users.includes(user1) && users.includes(user2)) {\n          return docSnap.id;\n        }\n      }\n      return null;\n    }\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      for (const id of ids) {\n        const messageDoc = await getDoc(doc(db, 'chatMessages', id));\n        if (messageDoc.exists()) {\n          messages.push({\n            id: messageDoc.id,\n            ...messageDoc.data()\n          });\n        }\n      }\n      messageList.value = messages;\n    }\n    function isImageMessage(message) {\n      return typeof message === 'string' && (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/.test(message));\n    }\n\n    // 👇 Load chat on component mount\n    onMounted(async () => {\n      chatId = await findChatId(user1, user2);\n      if (!chatId) {\n        const newChatRef = await addDoc(collection(db, 'chats'), {\n          user1,\n          user2,\n          messages: []\n        });\n        chatId = newChatRef.id;\n      }\n      const chatRef = doc(db, 'chats', chatId);\n      chatUnsub = onSnapshot(chatRef, chatSnap => {\n        if (chatSnap.exists()) {\n          const chatData = chatSnap.data();\n          const messageIds = chatData.messages || [];\n          loadMessagesByIds(messageIds);\n        } else {\n          console.log('Chat does not exist.');\n          messageList.value = [];\n        }\n      });\n    });\n    async function sendMessage() {\n      if (!newMessage.value.trim()) return;\n      try {\n        const messageData = {\n          sender: currentUser?.uid,\n          receiver: currentUser?.uid === user1 ? user2 : user1,\n          message: newMessage.value,\n          timestamp: serverTimestamp()\n        };\n        const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\n        await updateDoc(doc(db, 'chats', chatId), {\n          messages: arrayUnion(newMsgRef.id)\n        });\n        newMessage.value = \"\";\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      const date = ts.toDate();\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    const onDrop = e => {\n      const file = e.dataTransfer.files[0];\n      if (file) convertToBase64(file);\n    };\n    const convertToBase64 = file => {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64Image = reader.result;\n        previewUrl.value = base64Image;\n        await updateDoc(userRef, {\n          photoURL: base64Image\n        });\n      };\n      reader.readAsDataURL(file);\n    };\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n    });\n    const __returned__ = {\n      previewUrl,\n      fileInput,\n      userRef,\n      route,\n      user1,\n      user2,\n      auth,\n      currentUser,\n      newMessage,\n      messageList,\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      get chatId() {\n        return chatId;\n      },\n      set chatId(v) {\n        chatId = v;\n      },\n      findChatId,\n      loadMessagesByIds,\n      isImageMessage,\n      sendMessage,\n      formatTimestamp,\n      onDrop,\n      convertToBase64,\n      ref,\n      onBeforeUnmount,\n      onMounted,\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get db() {\n        return db;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getAuth() {\n        return getAuth;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onBeforeUnmount","onMounted","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","getDocs","db","useRoute","getAuth","previewUrl","fileInput","userRef","auth","currentUser","uid","route","user1","params","user2","newMessage","messageList","chatUnsub","chatId","findChatId","chatsRef","snapshot","docSnap","docs","data","users","includes","id","loadMessagesByIds","ids","messages","messageDoc","exists","push","value","isImageMessage","message","startsWith","test","newChatRef","chatRef","chatSnap","chatData","messageIds","console","log","sendMessage","trim","messageData","sender","receiver","timestamp","newMsgRef","error","formatTimestamp","ts","date","toDate","toLocaleTimeString","hour","minute","onDrop","e","file","dataTransfer","files","convertToBase64","reader","FileReader","onload","base64Image","result","photoURL","readAsDataURL"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li\r\n          v-for=\"msg in messageList\"\r\n          :key=\"msg.id\"\r\n          :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\"\r\n        >\r\n          <div v-if=\"isImageMessage(msg.message)\">\r\n            <img :src=\"msg.message\" alt=\"Image\" class=\"chat-image\" />\r\n          </div>\r\n          <div v-else>\r\n            {{ msg.message }}\r\n          </div>\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n\r\n      </ul>\r\n      <div class=\"input-area\">\r\n          <input type=\"text\" v-model=\"newMessage\">\r\n        <button @click.prevent=\"sendMessage\">\r\n              <i class=\"fas fa-paper-plane\"></i>\r\n          </button>\r\n\r\n      </div>\r\n      <div class=\"upload-box\" @dragover.prevent @drop.prevent=\"onDrop\">\r\n        <input type=\"file\" ref=\"fileInput\" @change=\"onFileChange\" hidden />\r\n        <img\r\n          :src=\"previewUrl || user.photoURL\"\r\n          alt=\"Profile Picture\"\r\n          class=\"avatar\"\r\n          @click=\"triggerFileInput\"\r\n        />\r\n        <p class=\"upload-text\">Click or drag image here to upload</p>\r\n      </div>\r\n      \r\n\r\n    </div>\r\n  </template>\r\n  <script setup>\r\n  import { ref, onBeforeUnmount, onMounted } from 'vue';\r\n  import { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp, getDocs } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  import { useRoute } from 'vue-router';\r\n  import { getAuth } from 'firebase/auth';\r\n\r\n  const previewUrl = ref('')\r\n  const fileInput = ref(null)\r\n\r\n \r\n  const userRef = doc(db, 'users', auth.currentUser.uid)\r\n  \r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  \r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n  \r\n  const newMessage = ref(\"\");\r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  let chatId = null;\r\n  \r\n  // 🔍 Helper to find the existing chat between user1 and user2\r\n  async function findChatId(user1, user2) {\r\n    const chatsRef = collection(db, 'chats');\r\n    const snapshot = await getDocs(chatsRef);\r\n  \r\n    for (const docSnap of snapshot.docs) {\r\n      const data = docSnap.data();\r\n      const users = [data.user1, data.user2];\r\n      if (users.includes(user1) && users.includes(user2)) {\r\n        return docSnap.id;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'chatMessages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  function isImageMessage(message) {\r\n  return typeof message === 'string' && (message.startsWith('data:image') || /\\.(jpeg|jpg|gif|png)$/.test(message));\r\n}\r\n\r\n  // 👇 Load chat on component mount\r\n  onMounted(async () => {\r\n    chatId = await findChatId(user1, user2);\r\n  \r\n    if (!chatId) {\r\n      const newChatRef = await addDoc(collection(db, 'chats'), {\r\n        user1,\r\n        user2,\r\n        messages: []\r\n      });\r\n      chatId = newChatRef.id;\r\n    }\r\n  \r\n    const chatRef = doc(db, 'chats', chatId);\r\n    chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n      if (chatSnap.exists()) {\r\n        const chatData = chatSnap.data();\r\n        const messageIds = chatData.messages || [];\r\n        loadMessagesByIds(messageIds);\r\n      } else {\r\n        console.log('Chat does not exist.');\r\n        messageList.value = [];\r\n      }\r\n    });\r\n  });\r\n  \r\n  async function sendMessage() {\r\n    if (!newMessage.value.trim()) return;\r\n  \r\n    try {\r\n      const messageData = {\r\n        sender: currentUser?.uid,  \r\n        receiver: currentUser?.uid === user1 ? user2 : user1,  \r\n        message: newMessage.value,\r\n        timestamp: serverTimestamp()\r\n      };\r\n  \r\n      const newMsgRef = await addDoc(collection(db, 'chatMessages'), messageData);\r\n  \r\n      await updateDoc(doc(db, 'chats', chatId), {\r\n        messages: arrayUnion(newMsgRef.id)\r\n      });\r\n  \r\n      newMessage.value = \"\";\r\n  \r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    }\r\n  }\r\n  \r\n  function formatTimestamp(ts) {\r\n    if (!ts) return '';\r\n    const date = ts.toDate();\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n  const onDrop = (e) => {\r\n    const file = e.dataTransfer.files[0]\r\n    if (file) convertToBase64(file)\r\n  }\r\n  \r\n  const convertToBase64 = (file) => {\r\n    const reader = new FileReader()\r\n    reader.onload = async () => {\r\n      const base64Image = reader.result\r\n      previewUrl.value = base64Image\r\n      await updateDoc(userRef, { photoURL: base64Image })\r\n      \r\n    }\r\n    reader.readAsDataURL(file)\r\n  }\r\n\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n  \r\n\r\n  <style scoped>\r\n \r\n .container {\r\n    width: 70%;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #f5f5f5;\r\n    border-radius: 10px;\r\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n  }\r\n \r\n  \r\n  ul {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding: 0;\r\n    margin: 0 0 20px 0;\r\n  }\r\n  \r\n \r\n  li {\r\n    list-style: none;\r\n    margin-bottom: 12px;\r\n    max-width: 50%;\r\n    padding: 12px 16px;\r\n    border-radius: 18px;\r\n    line-height: 1.4;\r\n    position: relative;\r\n    word-wrap: break-word;\r\n  }\r\n\r\n  .sent {\r\n    text-align: left;\r\n    background-color: #49df64;\r\n    color: white;\r\n    margin-left: auto;\r\n    border-bottom-right-radius: 4px;\r\n  }\r\n  \r\n\r\n  .received {\r\n    text-align: left;\r\n    background-color: #e9ecef;\r\n    color: #333;\r\n    margin-right: auto;\r\n    border-bottom-left-radius: 4px;\r\n  }\r\n  \r\n\r\n  .input-area {\r\n    display: flex;\r\n    height: 40px;\r\n    gap: 10px;\r\n  }\r\n  \r\n  input[type=\"text\"] {\r\n    flex: 1;\r\n    border: 1px solid #ddd;\r\n    border-radius: 15px;\r\n    outline: none;\r\n    font-size: 16px;\r\n    height: 45px;\r\n    width: 60%;\r\n    padding: 4px;\r\n  }\r\n  \r\n  input[type=\"text\"]:focus {\r\n    border-color: #49df64;\r\n  }\r\n  \r\n\r\n  button {\r\n    background-color: #49df64;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #4e9a5c;\r\n  }\r\n  \r\n  button i {\r\n    font-size: 18px;\r\n  }\r\n\r\n \r\n  .timestamp {\r\n    font-size: 0.7rem;\r\n    opacity: 0.8;\r\n    margin-top: 4px;\r\n    display: block;\r\n    text-align: right;\r\n  }\r\n  \r\n  .sent .timestamp {\r\n    color: rgba(255, 255, 255, 0.977);\r\n  }\r\n  \r\n  .received .timestamp {\r\n    color: rgba(0,0,0,0.6);\r\n    \r\n  }\r\n  \r\n\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}