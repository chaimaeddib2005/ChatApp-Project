{"ast":null,"code":"import { ref } from 'vue';\nimport { auth, db } from '@/firebase';\nimport { createUserWithEmailAndPassword, sendEmailVerification, signInWithEmailAndPassword, sendPasswordResetEmail, signInWithPopup, GoogleAuthProvider, signInAnonymously, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\n\n// Reactive user and auth loading states\nconst user = ref(null);\nconst authLoading = ref(true);\nconst getUserData = async firebaseUser => {\n  if (!firebaseUser) return null;\n  const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n  if (userDoc.exists()) {\n    return {\n      ...firebaseUser,\n      ...userDoc.data()\n    };\n  }\n  return firebaseUser;\n};\n\n// Modifiez le onAuthStateChanged pour inclure les données Firestore\nonAuthStateChanged(auth, async currentUser => {\n  if (currentUser) {\n    user.value = await getUserData(currentUser);\n  } else {\n    user.value = null;\n  }\n  authLoading.value = false;\n});\nconst register = async (email, password, name) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  const newUser = userCredential.user;\n\n  // Save to Firestore with name\n  await setDoc(doc(db, 'users', newUser.uid), {\n    uid: newUser.uid,\n    email: newUser.email,\n    name: name || '',\n    photoURL: '',\n    role: 'normal'\n  });\n  await sendEmailVerification(newUser);\n\n  // ✅ Sign out to prevent login until verification\n  await signOut(auth);\n  return userCredential;\n};\n\n// Login with email/password\nconst login = (email, password) => signInWithEmailAndPassword(auth, email, password);\n\n// Reset password\nconst resetPassword = email => sendPasswordResetEmail(auth, email);\n\n// Google login and Firestore user creation\nconst googleLogin = async () => {\n  const provider = new GoogleAuthProvider();\n  const userCredential = await signInWithPopup(auth, provider);\n  const googleUser = userCredential.user;\n  const userDocRef = doc(db, 'users', googleUser.uid);\n  const userSnap = await getDoc(userDocRef);\n  if (!userSnap.exists()) {\n    await setDoc(userDocRef, {\n      uid: googleUser.uid,\n      email: googleUser.email,\n      name: '',\n      photoURL: '',\n      role: 'normal'\n    });\n  }\n  return userCredential;\n};\n\n// Anonymous login (you can also add Firestore write here if needed)\nconst anonymousLogin = () => signInAnonymously(auth);\n\n// Logout function without router\nconst logout = () => signOut(auth);\nconst getCurrentUser = () => user.value;\n\n// Export composable\nexport const useAuth = () => {\n  return {\n    user,\n    authLoading,\n    register,\n    login,\n    resetPassword,\n    googleLogin,\n    anonymousLogin,\n    logout,\n    getCurrentUser\n  };\n};","map":{"version":3,"names":["ref","auth","db","createUserWithEmailAndPassword","sendEmailVerification","signInWithEmailAndPassword","sendPasswordResetEmail","signInWithPopup","GoogleAuthProvider","signInAnonymously","signOut","onAuthStateChanged","doc","setDoc","getDoc","user","authLoading","getUserData","firebaseUser","userDoc","uid","exists","data","currentUser","value","register","email","password","name","userCredential","newUser","photoURL","role","login","resetPassword","googleLogin","provider","googleUser","userDocRef","userSnap","anonymousLogin","logout","getCurrentUser","useAuth"],"sources":["C:/Users/khadi/ChatApp-Project/src/composables/useAuth.js"],"sourcesContent":["import { ref } from 'vue'\r\nimport { auth, db } from '@/firebase'\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  sendEmailVerification,\r\n  signInWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  signInAnonymously,\r\n  signOut,\r\n  onAuthStateChanged\r\n} from 'firebase/auth'\r\n\r\nimport {\r\n  doc,\r\n  setDoc,\r\n  getDoc\r\n} from 'firebase/firestore'\r\n\r\n\r\n// Reactive user and auth loading states\r\nconst user = ref(null)\r\nconst authLoading = ref(true)\r\n\r\nconst getUserData = async (firebaseUser) => {\r\n  if (!firebaseUser) return null\r\n  \r\n  const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid))\r\n  if (userDoc.exists()) {\r\n    return { \r\n      ...firebaseUser,\r\n      ...userDoc.data() \r\n    }\r\n  }\r\n  return firebaseUser\r\n}\r\n\r\n// Modifiez le onAuthStateChanged pour inclure les données Firestore\r\nonAuthStateChanged(auth, async (currentUser) => {\r\n  if (currentUser) {\r\n    user.value = await getUserData(currentUser)\r\n  } else {\r\n    user.value = null\r\n  }\r\n  authLoading.value = false\r\n})\r\n\r\n\r\nconst register = async (email, password, name) => {\r\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password)\r\n  const newUser = userCredential.user\r\n\r\n  // Save to Firestore with name\r\n  await setDoc(doc(db, 'users', newUser.uid), {\r\n    uid: newUser.uid,\r\n    email: newUser.email,\r\n    name: name || '',\r\n    photoURL: '',\r\n    role: 'normal'\r\n  })\r\n\r\n  await sendEmailVerification(newUser)\r\n\r\n  // ✅ Sign out to prevent login until verification\r\n  await signOut(auth)\r\n\r\n  return userCredential\r\n}\r\n\r\n// Login with email/password\r\nconst login = (email, password) => signInWithEmailAndPassword(auth, email, password)\r\n\r\n// Reset password\r\nconst resetPassword = (email) => sendPasswordResetEmail(auth, email)\r\n\r\n// Google login and Firestore user creation\r\nconst googleLogin = async () => {\r\n  const provider = new GoogleAuthProvider()\r\n  const userCredential = await signInWithPopup(auth, provider)\r\n  const googleUser = userCredential.user\r\n\r\n  const userDocRef = doc(db, 'users', googleUser.uid)\r\n  const userSnap = await getDoc(userDocRef)\r\n\r\n  if (!userSnap.exists()) {\r\n    await setDoc(userDocRef, {\r\n      uid: googleUser.uid,\r\n      email: googleUser.email,\r\n      name: '',\r\n      photoURL: '',\r\n      role: 'normal'\r\n    })\r\n  }\r\n\r\n  return userCredential\r\n}\r\n\r\n// Anonymous login (you can also add Firestore write here if needed)\r\nconst anonymousLogin = () => signInAnonymously(auth)\r\n\r\n// Logout function without router\r\nconst logout = () => signOut(auth)\r\n\r\nconst getCurrentUser = () => user.value \r\n\r\n// Export composable\r\nexport const useAuth = () => {\r\n  return {\r\n    user,\r\n    authLoading,\r\n    register,\r\n    login,\r\n    resetPassword,\r\n    googleLogin,\r\n    anonymousLogin,\r\n    logout,\r\n    getCurrentUser\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}