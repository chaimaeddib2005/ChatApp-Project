{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onBeforeUnmount } from 'vue';\nimport { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { useRoute } from 'vue-router';\nimport { getAuth } from 'firebase/auth';\nconst chatId = \"6HaLRtFkMgZvhMIVC2PQ\";\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let newMessage = \"\";\n    const route = useRoute();\n    const user1 = route.params.user1;\n    const user2 = route.params.user2;\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    async function findChatId(user1, user2) {\n      const chatsRef = collection(db, 'chats');\n      const snapshot = await getDocs(chatsRef);\n      for (const docSnap of snapshot.docs) {\n        const data = docSnap.data();\n        const users = [data.user1, data.user2];\n\n        // Check if the chat has both users (order-insensitive)\n        if (users.includes(user1) && users.includes(user2)) {\n          return docSnap.id; // this is your chatId\n        }\n      }\n      return null; // no matching chat found\n    }\n    const messageList = ref([]);\n    let chatUnsub = null;\n    async function loadMessagesByIds(ids) {\n      const messages = [];\n      for (const id of ids) {\n        const messageDoc = await getDoc(doc(db, 'messages', id));\n        if (messageDoc.exists()) {\n          messages.push({\n            id: messageDoc.id,\n            ...messageDoc.data()\n          });\n        }\n      }\n      messageList.value = messages;\n    }\n\n    //const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`; \n    const chatRef = doc(db, 'chats', chatId);\n    chatUnsub = onSnapshot(chatRef, chatSnap => {\n      if (chatSnap.exists()) {\n        const chatData = chatSnap.data();\n        const messageIds = chatData.messages || [];\n        loadMessagesByIds(messageIds);\n      } else {\n        console.log('Chat does not exist.');\n        messageList.value = [];\n      }\n    });\n    async function sendMessage() {\n      if (!newMessage.trim()) return;\n      try {\n        const messageData = {\n          sender: user1,\n          receiver: user2,\n          message: newMessage,\n          timestamp: serverTimestamp()\n        };\n        const newMsgRef = await addDoc(collection(db, 'messages'), messageData);\n\n        // 2. Update the chat document to include this message ID\n        await updateDoc(doc(db, 'chats', chatId), {\n          messages: arrayUnion(newMsgRef.id)\n        });\n\n        // 3. Clear the input field\n        newMessage = \"\";\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n    function formatTimestamp(ts) {\n      if (!ts) return '';\n      const date = ts.toDate(); // converts Firestore Timestamp to JS Date\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    onBeforeUnmount(() => {\n      if (chatUnsub) chatUnsub();\n    });\n    const __returned__ = {\n      get newMessage() {\n        return newMessage;\n      },\n      set newMessage(v) {\n        newMessage = v;\n      },\n      route,\n      user1,\n      user2,\n      auth,\n      currentUser,\n      findChatId,\n      messageList,\n      get chatUnsub() {\n        return chatUnsub;\n      },\n      set chatUnsub(v) {\n        chatUnsub = v;\n      },\n      loadMessagesByIds,\n      chatId,\n      chatRef,\n      sendMessage,\n      formatTimestamp,\n      ref,\n      onBeforeUnmount,\n      get doc() {\n        return doc;\n      },\n      get getDoc() {\n        return getDoc;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get collection() {\n        return collection;\n      },\n      get serverTimestamp() {\n        return serverTimestamp;\n      },\n      get db() {\n        return db;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get getAuth() {\n        return getAuth;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onBeforeUnmount","doc","getDoc","onSnapshot","addDoc","updateDoc","arrayUnion","collection","serverTimestamp","db","useRoute","getAuth","chatId","newMessage","route","user1","params","user2","auth","currentUser","findChatId","chatsRef","snapshot","getDocs","docSnap","docs","data","users","includes","id","messageList","chatUnsub","loadMessagesByIds","ids","messages","messageDoc","exists","push","value","chatRef","chatSnap","chatData","messageIds","console","log","sendMessage","trim","messageData","sender","receiver","message","timestamp","newMsgRef","error","formatTimestamp","ts","date","toDate","toLocaleTimeString","hour","minute"],"sources":["C:/Users/khadi/ChatApp-Project/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Chat between {{ user1 }} and {{ user2 }}</h2>\r\n      <ul>\r\n        <li v-for=\"msg in messageList\" :key=\"msg.message\" :class=\"msg.sender === currentUser?.uid ? 'sent' : 'received'\">\r\n          {{ msg.message }}\r\n          <small class=\"timestamp\">{{ formatTimestamp(msg.timestamp) }}</small>\r\n        </li>\r\n      </ul>\r\n      <input type=\"text\" v-model=\"newMessage\">\r\n      <button @click.prevent=\"sendMessage\">\r\n            <i class=\"fas fa-paper-plane\"></i>\r\n    </button>\r\n\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref,  onBeforeUnmount } from 'vue';\r\n  import { doc, getDoc, onSnapshot, addDoc, updateDoc, arrayUnion, collection, serverTimestamp } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  import { useRoute } from 'vue-router';\r\n  import { getAuth } from 'firebase/auth';\r\n\r\n  let newMessage = \"\";\r\n  const route = useRoute();\r\n  const user1 = route.params.user1;\r\n  const user2 = route.params.user2;\r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n\r\n  async function findChatId(user1, user2) {\r\n  const chatsRef = collection(db, 'chats');\r\n  const snapshot = await getDocs(chatsRef);\r\n\r\n  for (const docSnap of snapshot.docs) {\r\n    const data = docSnap.data();\r\n    const users = [data.user1, data.user2];\r\n    \r\n    // Check if the chat has both users (order-insensitive)\r\n    if (users.includes(user1) && users.includes(user2)) {\r\n      return docSnap.id; // this is your chatId\r\n    }\r\n  }\r\n\r\n  return null; // no matching chat found\r\n}\r\n\r\n  const messageList = ref([]);\r\n  let chatUnsub = null;\r\n  \r\n  async function loadMessagesByIds(ids) {\r\n    const messages = [];\r\n    for (const id of ids) {\r\n      const messageDoc = await getDoc(doc(db, 'messages', id));\r\n      if (messageDoc.exists()) {\r\n        messages.push({ id: messageDoc.id, ...messageDoc.data() });\r\n      }\r\n    }\r\n    messageList.value = messages;\r\n  }\r\n  \r\n  //const chatId = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`; \r\n  const chatId = \"6HaLRtFkMgZvhMIVC2PQ\";\r\n  \r\n  const chatRef = doc(db, 'chats', chatId);\r\n  \r\n  chatUnsub = onSnapshot(chatRef, (chatSnap) => {\r\n    if (chatSnap.exists()) {\r\n      const chatData = chatSnap.data();\r\n      const messageIds = chatData.messages || [];\r\n      loadMessagesByIds(messageIds);\r\n    } else {\r\n      console.log('Chat does not exist.');\r\n      messageList.value = [];\r\n    }\r\n  });\r\n\r\n  async function sendMessage() {\r\n  if (!newMessage.trim()) return;\r\n\r\n  try {\r\n    const messageData = {\r\n      sender: user1,\r\n      receiver: user2,\r\n      message: newMessage,\r\n      timestamp: serverTimestamp()\r\n    };\r\n\r\n    const newMsgRef = await addDoc(collection(db, 'messages'), messageData);\r\n\r\n    // 2. Update the chat document to include this message ID\r\n    await updateDoc(doc(db, 'chats', chatId), {\r\n      messages: arrayUnion(newMsgRef.id)\r\n    });\r\n\r\n    // 3. Clear the input field\r\n    newMessage = \"\";\r\n\r\n  } catch (error) {\r\n    console.error(\"Error sending message:\", error);\r\n  }\r\n}\r\nfunction formatTimestamp(ts) {\r\n  if (!ts) return '';\r\n  const date = ts.toDate(); // converts Firestore Timestamp to JS Date\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n\r\n\r\n  \r\n  onBeforeUnmount(() => {\r\n    if (chatUnsub) chatUnsub();\r\n  });\r\n  </script>\r\n\r\n  \r\n  <style scoped>\r\n  ul{\r\n    max-width: 40%;\r\n  }\r\n  li{\r\n    list-style: none;\r\n    width: 100px;\r\n  }\r\n  .sent {\r\n    text-align: right;\r\n    background-color: #daf8cb;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  .received {\r\n    text-align: left;\r\n    background-color: #f1f0f0;\r\n    margin: 5px 0;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    width: auto;\r\n    margin-right: auto;\r\n  }\r\n  button{\r\n    border: none;\r\n    background-color: rgb(72, 111, 72);\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  .timestamp {\r\n  font-size: 0.75rem;\r\n  color: #888;\r\n  display: block;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n</style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}